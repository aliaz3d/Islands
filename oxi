

	if (not game:IsLoaded()) then
		game.Loaded:Wait();
	end


	local name = "Foxi cheats V2 (anti afk always enabled) Update [Changelog]!"









	-- Venyx Ui
	-- init
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()

	-- services
	local input = game:GetService("UserInputService")
	local run = game:GetService("RunService")
	local tween = game:GetService("TweenService")
	local tweeninfo = TweenInfo.new
	local alive = true

	--Obj
	local MainContainer

	-- additional
	local utility = {}

	-- themes
	local objects = {}



	if not themes then
		themes = {
			DarkContrast = Color3.new(0.117647, 0.117647, 0.117647),
			Glow = Color3.new(0, 0, 0),
			LightContrast = Color3.new(0.156863, 0.156863, 0.156863),
			SliderColor = Color3.new(1, 0.443137, 0.2),
			NotToggledColor = Color3.new(0, 1, 0.791667),
			ButtonColor = Color3.new(0.243137, 0.243137, 0.243137),
			ToggledColor = Color3.new(0.126866, 0.925, 0.0128472),
			TopBarColor = Color3.new(0.137255, 0.137255, 0.137255),
			Background = Color3.new(0.0980392, 0.0980392, 0.0980392),
			TextColor = Color3.new(1, 1, 1),
			Accent = Color3.new(1, 0.443137, 0.2),
		}
	end

	do
		-- Dynamic Scroll
		function dynamicscroll(scrollingframe,uilis)
			uilis:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
				scrollingframe.CanvasSize = UDim2.new(0, 0, 0, uilis.AbsoluteContentSize.Y + 10)
			end)
		end 

		function utility:Create(instance, properties, children)
			local object = Instance.new(instance)

			for i, v in pairs(properties or {}) do
				object[i] = v

				if typeof(v) == "Color3" then -- save for theme changer later
					local theme = utility:Find(themes, v)

					if theme then
						objects[theme] = objects[theme] or {}
						objects[theme][i] = objects[theme][i] or setmetatable({}, {_mode = "k"})

						table.insert(objects[theme][i], object)
					end
				end
			end

			for i, module in pairs(children or {}) do
				module.Parent = object
			end

			return object
		end

		function utility:Tween(instance, properties, duration, ...)
			tween:Create(instance, tweeninfo(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), properties):Play()
		end

		function utility:Wait()
			run.RenderStepped:Wait()
			return true
		end

		function utility:Find(table, value) -- table.find doesn't work for dictionaries
			for i, v in  pairs(table) do
				if v == value then
					return i
				end
			end
		end

		function utility:Sort(pattern, values)
			local new = {}
			pattern = pattern:lower()

			if pattern == "" then
				return values
			end

			for i, value in pairs(values) do
				if tostring(value):lower():find(pattern) then
					table.insert(new, value)
				end
			end

			return new
		end

		function utility:Pop(object, shrink)
			local clone = object:Clone()

			clone.AnchorPoint = Vector2.new(0.5, 0.5)
			clone.Size = clone.Size - UDim2.new(0, shrink, 0, shrink)
			clone.Position = UDim2.new(0.5, 0, 0.5, 0)

			clone.Parent = object
			clone:ClearAllChildren()

			object.ImageTransparency = 1
			utility:Tween(clone, {Size = object.Size}, 0.2)

			spawn(function()
				wait(0.2)

				object.ImageTransparency = 0
				clone:Destroy()
			end)

			return clone
		end

		function utility:InitializeKeybind()
			self.keybinds = {}
			self.ended = {}

			input.InputBegan:Connect(function(key)
				if self.keybinds[key.KeyCode] then
					for i, bind in pairs(self.keybinds[key.KeyCode]) do
						bind()
					end
				end
			end)

			input.InputEnded:Connect(function(key)
				if key.UserInputType == Enum.UserInputType.MouseButton1 then
					for i, callback in pairs(self.ended) do
						callback()
					end
				end
			end)
		end

		function utility:BindToKey(key, callback)

			self.keybinds[key] = self.keybinds[key] or {}

			table.insert(self.keybinds[key], callback)

			return {
				UnBind = function()
					for i, bind in pairs(self.keybinds[key]) do
						if bind == callback then
							table.remove(self.keybinds[key], i)
						end
					end
				end
			}
		end

		function utility:KeyPressed() -- yield until next key is pressed
			local key = input.InputBegan:Wait()

			while key.UserInputType ~= Enum.UserInputType.Keyboard	 do
				key = input.InputBegan:Wait()
			end

			wait() -- overlapping connection

			return key
		end

		function utility:DraggingEnabled(frame, parent)

			parent = parent or frame

			-- stolen from wally or kiriot, kek
			local dragging = false
			local dragInput, mousePos, framePos

			frame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					mousePos = input.Position
					framePos = parent.Position

					input.Changed:Connect(function()
						if input.UserInputState == Enum.UserInputState.End then
							dragging = false
						end
					end)
				end
			end)

			frame.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					dragInput = input
				end
			end)

			input.InputChanged:Connect(function(input)
				if input == dragInput and dragging then
					local delta = input.Position - mousePos
					parent.Position  = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
				end
			end)

		end

		function utility:DraggingEnded(callback)
			table.insert(self.ended, callback)
		end

		local mouse = game.Players.LocalPlayer:GetMouse()

		local DRAGGER_SIZE = 20
		local DRAGGER_TRANSPARENCY = .5

		local dragging = false


		function utility:makeResizable(obj:GuiObject, minSize)

			local resizer = Instance.new("Frame")
			resizer.AnchorPoint = Vector2.new(1, 1)
			resizer.Position = UDim2.new(1, -3, 1, -3)
			resizer.Size = UDim2.new(0, 30, 0, 30)
			resizer.BackgroundTransparency = 1
			resizer.ClipsDescendants = true

			local dragger = Instance.new("ImageButton", resizer)
			dragger.BackgroundColor3 = Color3.new(0, 0, 0)
			dragger.Image = "rbxassetid://10756675188"
			dragger.ImageTransparency = 0
			dragger.BackgroundTransparency = .5
			dragger.Size = UDim2.new(1, 0, 1, 0)
			dragger.ZIndex = 5

			local Corner = Instance.new("UICorner", dragger)
			Corner.CornerRadius = UDim.new(0, 8)

			resizer.Size = UDim2.fromOffset(DRAGGER_SIZE, DRAGGER_SIZE)
			--resizer.Position = UDim2.new(1, -DRAGGER_SIZE, 1, -DRAGGER_SIZE)

			local duic = dragger.UICorner
			minSize = minSize or Vector2.new(160, 90)

			local startDrag, startSize
			local gui = obj:FindFirstAncestorWhichIsA("ScreenGui")
			resizer.Parent = obj

			local function finishResize(tr)
				dragger.Position = UDim2.new(0,0,0,0)
				dragger.Size = UDim2.new(1,0,1,0)
				dragger.Parent = resizer
				dragger.BackgroundTransparency = tr
				dragger.ImageTransparency = 0
				duic.Parent = dragger
				startDrag = nil
			end
			dragger.MouseButton1Down:Connect(function()
				if not startDrag then
					startSize = obj.AbsoluteSize			
					startDrag = Vector2.new(mouse.X, mouse.Y)
					dragger.BackgroundTransparency = 1
					dragger.ImageTransparency = 1
					dragger.Size = UDim2.fromOffset(gui.AbsoluteSize.X, gui.AbsoluteSize.Y)
					dragger.Position = UDim2.new(0,0,0,0)
					duic.Parent = nil
					dragger.Parent = gui
				end
			end)	
			dragger.MouseMoved:Connect(function()
				if startDrag then		
					local m = Vector2.new(mouse.X, mouse.Y)
					local mouseMoved = Vector2.new(m.X - startDrag.X, m.Y - startDrag.Y)

					local s = startSize + mouseMoved
					local sx = math.max(minSize.X, s.X) 
					local sy = math.max(minSize.Y, s.Y)

					obj.Size = UDim2.fromOffset(sx, sy)

				end
			end)
			dragger.MouseEnter:Connect(function()
				finishResize(DRAGGER_TRANSPARENCY)				
			end)
			dragger.MouseLeave:Connect(function()
				finishResize(.5)
			end)		
			dragger.MouseButton1Up:Connect(function()
				finishResize(DRAGGER_TRANSPARENCY)
			end)	
		end

	end

	-- classes

	local library = {} -- main
	local page = {}
	local section = {}

	do
		library.__index = library
		page.__index = page
		section.__index = section

		-- new classes

		function library.new(title)
			local container = utility:Create("ScreenGui", {
				Name = title,
				Parent = game.CoreGui
			}, {
				utility:Create("ImageLabel", {
					Name = "Main",
					BackgroundTransparency = 1,
					Position = UDim2.new(0.05, 0, 0.5, 0),
					Size = UDim2.new(0, 500, 0, 350),
					Image = "rbxassetid://4641149554",
					ImageColor3 = themes.Background,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(4, 4, 296, 296)
				}, {
					utility:Create("ImageLabel", {
						Name = "Glow",
						BackgroundTransparency = 1,
						Position = UDim2.new(0, -15, 0, -15),
						Size = UDim2.new(1, 30, 1, 30),
						ZIndex = 0,
						Image = "rbxassetid://5028857084",
						ImageColor3 = themes.Glow,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(24, 24, 276, 276)
					}),
					utility:Create("ImageLabel", {
						Name = "Pages",
						BackgroundTransparency = 1,
						ClipsDescendants = true,
						Position = UDim2.new(0, 0, 0, 38),
						Size = UDim2.new(0, 126, 1, -38),
						ZIndex = 3,
						Image = "rbxassetid://5012534273",
						ImageColor3 = themes.DarkContrast,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(4, 4, 296, 296)
					},
					{
						utility:Create("Frame", {
							Name = "sadsad",
							Parent = library.pagesContainer,
							BackgroundTransparency = 0,
							BackgroundColor3 = themes.LightContrast,
							BorderSizePixel = 0,
							AnchorPoint = Vector2.new(0.5,0),
							Position = UDim2.new(0.5, 0, 0, 65),
							Size = UDim2.new(0,60,0,2),
							ZIndex = 5,

						}),
						utility:Create("ImageLabel", {
							Name = "HubLogo",
							Parent = library.pagesContainer,
							BackgroundTransparency = 1,
							AnchorPoint = Vector2.new(0.5,0),
							Position = UDim2.new(0.5, 0, 0, 5),
							Size = UDim2.new(0,70,0,70),
							ZIndex = 5,
							ImageColor3 = Color3.new(1,1,1),
							Image = "rbxassetid://10574963725",

						}),


						utility:Create("ScrollingFrame", {
							Name = "Pages_Container",
							Active = true,
							BackgroundTransparency = 1,
							Position = UDim2.new(0, 0, 0, 80),
							Size = UDim2.new(1, 0, 1, -20),
							CanvasSize = UDim2.new(0, 0, 0, 20),
							AutomaticCanvasSize = Enum.AutomaticSize.Y,
							ScrollBarThickness = 5,
							ScrollBarImageTransparency = 0,
							ScrollBarImageColor3 = themes.LightContrast
						}, {
							utility:Create("UIListLayout", {
								SortOrder = Enum.SortOrder.LayoutOrder,
								Padding = UDim.new(0, 10)
							})
						})
					}

					),
					utility:Create("ImageLabel", {
						Name = "TopBar",
						BackgroundTransparency = 1,
						ClipsDescendants = true,
						Size = UDim2.new(1, 0, 0, 38),
						ZIndex = 5,
						Image = "rbxassetid://4595286933",
						ImageColor3 = themes.TopBarColor,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(4, 4, 296, 296)
					}, {
						utility:Create("TextLabel", { -- title
							Name = "Title",
							AnchorPoint = Vector2.new(0, 0.5),
							BackgroundTransparency = 1,
							Position = UDim2.new(0, 12, 0, 19),
							Size = UDim2.new(1, -46, 0, 16),
							ZIndex = 5,
							Font = Enum.Font.GothamBold,
							Text = title,
							RichText = true , 
							TextColor3 = themes.TextColor,
							TextSize = 14,
							TextXAlignment = Enum.TextXAlignment.Center
						}),
					})
				})
			})


			utility:InitializeKeybind()
			utility:DraggingEnabled(container.Main.TopBar, container.Main)

			spawn(function()
				utility:makeResizable(container.Main, Vector2.new(444, 216))
			end)


			return setmetatable({
				container = container,
				pagesContainer = container.Main.Pages.Pages_Container,
				pages = {}
			}, library)
		end


		function page.new(library, title, icon)

			local button = utility:Create("TextButton", {
				Name = title,
				Parent = library.pagesContainer,
				BackgroundTransparency = 0.3,
				BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255),
				BorderSizePixel = 0,
				Size = UDim2.new(1, -6, 0, 26),
				ZIndex = 3,
				AutoButtonColor = false,
				Font = Enum.Font.Gotham,
				Text = "",
				TextSize = 14
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 36, 0.5, 0),
					Size = UDim2.new(0, 76, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.65,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("UICorner", {

				}),
				icon and utility:Create("ImageLabel", {
					Name = "Icon",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 8, 0.5, 0),
					Size = UDim2.new(0, 20, 0, 20),
					ZIndex = 3,
					Image = "rbxassetid://" .. tostring(icon),
					ImageColor3 = themes.TextColor,
					ImageTransparency = 0.64,
					ScaleType = Enum.ScaleType.Fit
				}) or {}
			})

			local container = utility:Create("ScrollingFrame", {
				Name = title,
				Parent = library.container.Main,
				Active = true,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Position = UDim2.new(0, 134, 0, 46),
				Size = UDim2.new(1, -142, 1, -56),
				CanvasSize = UDim2.new(0, 0, 0, 0),
				ScrollBarThickness = 3,
				ScrollBarImageColor3 = themes.DarkContrast,
				Visible = false
			})
			local uilist =  utility:Create("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 10),
				Parent = container, 
			})
        --[[

        uilist:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
            container.CanvasSize = UDim2.new(0, 0, 0, uilist.AbsoluteContentSize.Y + 10)
        end) 
        ]]

			return setmetatable({
				library = library,
				container = container,
				button = button,
				sections = {}
			}, page)
		end

		function section.new(page, title)
			local container = utility:Create("ImageLabel", {
				Name = title,
				Parent = page.container,
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -10, 0, 28),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.LightContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(4, 4, 296, 296),
				ClipsDescendants = true
			}, {
				utility:Create("Frame", {
					Name = "Container",
					Active = true,
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Position = UDim2.new(0, 8, 0, 8),
					Size = UDim2.new(1, -16, 1, -16)
				}, {
					utility:Create("TextLabel", {
						Name = "Title",
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 0, 20),
						ZIndex = 2,
						Font = Enum.Font.Gotham,
						Text =  title,
						TextColor3 = themes.Accent,
						TextSize = 14,
						TextXAlignment = Enum.TextXAlignment.Center,
						TextTransparency = 1
					}),
					utility:Create("UIListLayout", {
						SortOrder = Enum.SortOrder.LayoutOrder,
						Padding = UDim.new(0, 4)
					})
				})
			})


			return setmetatable({
				page = page,
				container = container.Container,
				colorpickers = {},
				modules = {},
				binds = {},
				lists = {},
			}, section)
		end

		function library:addPage(...)

			local page = page.new(self, ...)
			local button = page.button

			table.insert(self.pages, page)

			button.MouseButton1Click:Connect(function()
				self:SelectPage(page, true)
			end)

			return page
		end

		function page:addSection(...)
			local section = section.new(self, ...)

			table.insert(self.sections, section)

			return section
		end

		-- functions

		function library:setTheme(theme, color3)
			themes[theme] = color3

			for property, objects in pairs(objects[theme]) do
				for i, object in pairs(objects) do
					if not object.Parent or (object.Name == "Button" and object.Parent.Name == "ColorPicker") then
						objects[i] = nil -- i can do this because weak tables :D
					else
						object[property] = color3
					end
				end
			end
		end
		local SavedSize
		function library:toggle()

			if self.toggling then
				return
			end

			self.toggling = true

			local container = self.container.Main
			local topbar = container.TopBar

			if self.position then
				utility:Tween(container, {
					Size = SavedSize,
					Position = self.position
				}, 0.2)
				wait(0.2)

				utility:Tween(topbar, {Size = UDim2.new(1, 0, 0, 38)}, 0.2)
				wait(0.2)

				container.ClipsDescendants = false
				self.position = nil
			else
				self.position = container.Position
				container.ClipsDescendants = true


				SavedSize = container.Size

				utility:Tween(topbar, {Size = UDim2.new(1, 0, 1, 0)}, 0.2)
				wait(0.2)

				utility:Tween(container, {
					Size = UDim2.new(0, SavedSize.X.Offset, 0, 0),
					Position = self.position + UDim2.new(0, 0, 0, SavedSize.Y.Offset)
				}, 0.2)
				wait(0.2)
			end

			self.toggling = false
		end

		-- new modules

		function library:Notify(title, text, callback)

			-- overwrite last notification
			if self.activeNotification then
				self.activeNotification = self.activeNotification()
			end

			-- standard create
			local notification = utility:Create("ImageLabel", {
				Name = "Notification",
				Parent = self.container,
				BackgroundTransparency = 1,
				Size = UDim2.new(0, 200, 0, 60),
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.Background,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(4, 4, 296, 296),
				ZIndex = 3,
				ClipsDescendants = true
			}, {
				utility:Create("ImageLabel", {
					Name = "Flash",
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					Image = "rbxassetid://4641149554",
					ImageColor3 = themes.TextColor,
					ZIndex = 5
				}),
				utility:Create("ImageLabel", {
					Name = "Glow",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, -15, 0, -15),
					Size = UDim2.new(1, 30, 1, 30),
					ZIndex = 2,
					Image = "rbxassetid://5028857084",
					ImageColor3 = themes.Glow,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(24, 24, 276, 276)
				}),
				utility:Create("TextLabel", {
					Name = "Title",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0, 8),
					Size = UDim2.new(1, -40, 0, 16),
					ZIndex = 4,
					Font = Enum.Font.GothamSemibold,
					TextColor3 = themes.TextColor,
					TextSize = 14.000,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("TextLabel", {
					Name = "Text",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 1, -24),
					Size = UDim2.new(1, -40, 0, 16),
					ZIndex = 4,
					Font = Enum.Font.Gotham,
					TextColor3 = themes.TextColor,
					TextSize = 12.000,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageButton", {
					Name = "Accept",
					BackgroundTransparency = 1,
					Position = UDim2.new(1, -26, 0, 8),
					Size = UDim2.new(0, 16, 0, 16),
					Image = "rbxassetid://5012538259",
					ImageColor3 = themes.TextColor,
					ZIndex = 4
				}),
				utility:Create("ImageButton", {
					Name = "Decline",
					BackgroundTransparency = 1,
					Position = UDim2.new(1, -26, 1, -24),
					Size = UDim2.new(0, 16, 0, 16),
					Image = "rbxassetid://5012538583",
					ImageColor3 = themes.TextColor,
					ZIndex = 4
				})
			})

			-- dragging
			utility:DraggingEnabled(notification)

			-- position and size
			title = title or "Notification"
			text = text or ""

			notification.Title.Text = title
			notification.Text.Text = text

			local padding = 10
			local textSize = game:GetService("TextService"):GetTextSize(text, 12, Enum.Font.Gotham, Vector2.new(math.huge, 16))

			notification.Position = library.lastNotification or UDim2.new(0, padding, 1, -(notification.AbsoluteSize.Y + padding))
			notification.Size = UDim2.new(0, 0, 0, 60)

			utility:Tween(notification, {Size = UDim2.new(0, textSize.X + 70, 0, 60)}, 0.2)
			wait(0.2)

			notification.ClipsDescendants = false
			utility:Tween(notification.Flash, {
				Size = UDim2.new(0, 0, 0, 60),
				Position = UDim2.new(1, 0, 0, 0)
			}, 0.2)

			-- callbacks
			local active = true
			local close = function()

				if not active then
					return
				end

				active = false
				notification.ClipsDescendants = true

				library.lastNotification = notification.Position
				notification.Flash.Position = UDim2.new(0, 0, 0, 0)
				utility:Tween(notification.Flash, {Size = UDim2.new(1, 0, 1, 0)}, 0.2)

				wait(0.2)
				utility:Tween(notification, {
					Size = UDim2.new(0, 0, 0, 60),
					Position = notification.Position + UDim2.new(0, textSize.X + 70, 0, 0)
				}, 0.2)

				wait(0.2)
				notification:Destroy()
			end

			self.activeNotification = close

			notification.Accept.MouseButton1Click:Connect(function()

				if not active then
					return
				end

				if callback then
					callback(true)
				end

				close()
			end)

			notification.Decline.MouseButton1Click:Connect(function()

				if not active then
					return
				end

				if callback then
					callback(false)
				end

				close()
			end)
		end

		function section:addButton(title, callback)
			local button = utility:Create("ImageButton", {
				Name = "Button",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.ButtonColor,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					BackgroundTransparency = 1,
					Size = UDim2.new(1, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012
				})
			})

			table.insert(self.modules, button)
			--self:Resize()

			local text = button.Title
			local debounce

			button.MouseButton1Click:Connect(function()



				if debounce then
					return
				end

				-- animation
				utility:Pop(button, 15)

				debounce = true
				text.TextSize = 0
				utility:Tween(button.Title, {TextSize = 13}, 0.2)

				wait(0.2)
				utility:Tween(button.Title, {TextSize = 12}, 0.2)

				spawn(function()
					if callback then
						callback(function(...)
							self:updateButton(button, ...)
						end)
					end
				end)


				debounce = false
			end)
			local buttonfunc = {}
			function buttonfunc:SetText()

			end 

			return buttonfunc,button
		end

		function section:addText(title)
			local button = utility:Create("ImageButton", {
				Name = "Button",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.ButtonColor,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					BackgroundTransparency = 1,
					Size = UDim2.new(1, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012
				})
			})

			table.insert(self.modules, button)
			self:Resize()

			local text = button.Title
			local debounce

			--button.MouseButton1Click:Connect(function()



			--	if debounce then
			--		return
			--	end

			--	-- animation
			--	utility:Pop(button, 15)

			--	debounce = true
			--	text.TextSize = 0
			--	utility:Tween(button.Title, {TextSize = 13}, 0.2)

			--	wait(0.2)
			--	utility:Tween(button.Title, {TextSize = 12}, 0.2)

			--	spawn(function()
			--		if callback then
			--			callback(function(...)
			--				self:updateButton(button, ...)
			--			end)
			--		end
			--	end)


			--	debounce = false
			--end)
			local buttonfunc = {}
			function buttonfunc:SetText()

			end 

			return buttonfunc,button
		end

		function section:addToggle(title, default, callback)
			local sec = self 

			-- local title = t or "Toggle"
			-- local default = typeof(d) == 'bool' and d or false
			-- local callback = typeof(d) == 'function' and d or typeof(c) == 'function' and c or function() end

			local toggle = utility:Create("ImageButton", {
				Name = "Toggle",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.DarkContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			},{
				utility:Create("TextLabel", {
					Name = "Title",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0.5, 1),
					Size = UDim2.new(0.5, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageLabel", {
					Name = "Button",
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Position = UDim2.new(1, -50, 0.5, -8),
					Size = UDim2.new(0, 40, 0, 16),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.NotToggledColor,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("ImageLabel", {
						Name = "Frame",
						BackgroundTransparency = 1,
						Position = UDim2.new(0, 2, 0.5, -6),
						Size = UDim2.new(1, -22, 1, -4),
						ZIndex = 2,
						Image = "rbxassetid://5028857472",
						ImageColor3 = themes.TextColor,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(2, 2, 298, 298)
					})
				})
			})

			table.insert(self.modules, toggle)
			--self:Resize()

			local active = default
			self:updateToggle(toggle, nil, active)

			toggle.MouseButton1Click:Connect(function()
				active = not active
				self:updateToggle(toggle, nil, active)

				if callback then
					callback(active, function(...)
						self:updateToggle(toggle, ...)
					end)
				end
			end)
			local togglefunc = {}
			function togglefunc:Set(bool)
				active =  bool
				sec:updateToggle(toggle,nil,active)
				if callback then
					callback(active, function(...)
						sec:updateToggle(toggle, ...)
					end)
				end

			end 



			return togglefunc,toggle
		end

		function section:addTextbox(title, default, callback)
			local textbox = utility:Create("ImageButton", {
				Name = "Textbox",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.DarkContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0.5, 1),
					Size = UDim2.new(0.5, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageLabel", {
					Name = "Button",
					BackgroundTransparency = 1,
					Position = UDim2.new(1, -110, 0.5, -8),
					Size = UDim2.new(0, 100, 0, 16),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.LightContrast,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("TextBox", {
						Name = "Textbox",
						BackgroundTransparency = 1,
						TextTruncate = Enum.TextTruncate.AtEnd,
						Position = UDim2.new(0, 5, 0, 0),
						Size = UDim2.new(1, -10, 1, 0),
						ClearTextOnFocus = false,
						ZIndex = 3,
						Font = Enum.Font.GothamSemibold,
						Text = default or "",
						TextColor3 = themes.TextColor,
						TextSize = 11
					})
				})
			})

			table.insert(self.modules, textbox)
			--self:Resize()

			local button = textbox.Button
			local input = button.Textbox

			textbox.MouseButton1Click:Connect(function()

				if textbox.Button.Size ~= UDim2.new(0, 100, 0, 16) then
					return
				end

				utility:Tween(textbox.Button, {
					Size = UDim2.new(0, 200, 0, 16),
					Position = UDim2.new(1, -210, 0.5, -8)
				}, 0.2)

				wait()

				input.TextXAlignment = Enum.TextXAlignment.Left
				input:CaptureFocus()
			end)

			input:GetPropertyChangedSignal("Text"):Connect(function()

				if button.ImageTransparency == 0 and (button.Size == UDim2.new(0, 200, 0, 16) or button.Size == UDim2.new(0, 100, 0, 16)) then -- i know, i dont like this either
					utility:Pop(button, 10)
				end

				if callback then
					callback(input.Text, nil, function(...)
						self:updateTextbox(textbox, ...)
					end)
				end
			end)

			input.FocusLost:Connect(function()

				input.TextXAlignment = Enum.TextXAlignment.Center

				utility:Tween(textbox.Button, {
					Size = UDim2.new(0, 100, 0, 16),
					Position = UDim2.new(1, -110, 0.5, -8)
				}, 0.2)

				if callback then
					callback(input.Text, true, function(...)
						self:updateTextbox(textbox, ...)
					end)
				end
			end)

			return textbox
		end

		function section:addKeybind(title, default, callback, changedCallback)
			local keybind = utility:Create("ImageButton", {
				Name = "Keybind",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.DarkContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0.5, 1),
					Size = UDim2.new(1, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageLabel", {
					Name = "Button",
					BackgroundTransparency = 1,
					Position = UDim2.new(1, -110, 0.5, -8),
					Size = UDim2.new(0, 100, 0, 16),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.LightContrast,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("TextLabel", {
						Name = "Text",
						BackgroundTransparency = 1,
						ClipsDescendants = true,
						Size = UDim2.new(1, 0, 1, 0),
						ZIndex = 3,
						Font = Enum.Font.GothamSemibold,
						Text = default and default.Name or "None",
						TextColor3 = themes.TextColor,
						TextSize = 11
					})
				})
			})

			table.insert(self.modules, keybind)
			--self:Resize()

			local text = keybind.Button.Text
			local button = keybind.Button

			local animate = function()
				if button.ImageTransparency == 0 then
					utility:Pop(button, 10)
				end
			end

			self.binds[keybind] = {callback = function()
				if not game:GetService("UserInputService"):GetFocusedTextBox() and alive then
					animate()

					if callback then
						callback(function(...)
							self:updateKeybind(keybind, ...)
						end)
					end
				end
			end}

			if default and callback then
				self:updateKeybind(keybind, nil, default)
			end

			keybind.MouseButton1Click:Connect(function()

				animate()

				if self.binds[keybind].connection then -- unbind
					return self:updateKeybind(keybind)
				end

				if text.Text == "None" then -- new bind
					text.Text = "..."

					local key = utility:KeyPressed()

					self:updateKeybind(keybind, nil, key.KeyCode)
					animate()

					if changedCallback then
						changedCallback(key, function(...)
							self:updateKeybind(keybind, ...)
						end)
					end
				end
			end)

			return keybind
		end

		function section:addColorPicker(title, default, callback)
			local colorpicker = utility:Create("ImageButton", {
				Name = "ColorPicker",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, 30),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.DarkContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			},{
				utility:Create("TextLabel", {
					Name = "Title",
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0.5, 1),
					Size = UDim2.new(0.5, 0, 1, 0),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageButton", {
					Name = "Button",
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Position = UDim2.new(1, -50, 0.5, -7),
					Size = UDim2.new(0, 40, 0, 14),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = Color3.fromRGB(255, 255, 255),
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				})
			})

			local tab = utility:Create("ImageLabel", {
				Name = "ColorPicker",
				Parent = self.page.library.container,
				BackgroundTransparency = 1,
				Position = UDim2.new(0.75, 0, 0.400000006, 0),
				Selectable = true,
				AnchorPoint = Vector2.new(0.5, 0.5),
				Size = UDim2.new(0, 162, 0, 169),
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.Background,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298),
				Visible = false,
			}, {
				utility:Create("ImageLabel", {
					Name = "Glow",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, -15, 0, -15),
					Size = UDim2.new(1, 30, 1, 30),
					ZIndex = 0,
					Image = "rbxassetid://5028857084",
					ImageColor3 = themes.Glow,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(22, 22, 278, 278)
				}),
				utility:Create("TextLabel", {
					Name = "Title",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0, 8),
					Size = UDim2.new(1, -40, 0, 16),
					ZIndex = 2,
					Font = Enum.Font.GothamSemibold,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 14,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("ImageButton", {
					Name = "Close",
					BackgroundTransparency = 1,
					Position = UDim2.new(1, -26, 0, 8),
					Size = UDim2.new(0, 16, 0, 16),
					ZIndex = 2,
					Image = "rbxassetid://5012538583",
					ImageColor3 = themes.TextColor
				}),
				utility:Create("Frame", {
					Name = "Container",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 8, 0, 32),
					Size = UDim2.new(1, -18, 1, -40)
				}, {
					utility:Create("UIListLayout", {
						SortOrder = Enum.SortOrder.LayoutOrder,
						Padding = UDim.new(0, 6)
					}),
					utility:Create("ImageButton", {
						Name = "Canvas",
						BackgroundTransparency = 1,
						BorderColor3 = themes.LightContrast,
						Size = UDim2.new(1, 0, 0, 60),
						AutoButtonColor = false,
						Image = "rbxassetid://5108535320",
						ImageColor3 = Color3.fromRGB(255, 0, 0),
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(2, 2, 298, 298)
					}, {
						utility:Create("ImageLabel", {
							Name = "White_Overlay",
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 60),
							Image = "rbxassetid://5107152351",
							SliceCenter = Rect.new(2, 2, 298, 298)
						}),
						utility:Create("ImageLabel", {
							Name = "Black_Overlay",
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 0, 60),
							Image = "rbxassetid://5107152095",
							SliceCenter = Rect.new(2, 2, 298, 298)
						}),
						utility:Create("ImageLabel", {
							Name = "Cursor",
							BackgroundColor3 = themes.TextColor,
							AnchorPoint = Vector2.new(0.5, 0.5),
							BackgroundTransparency = 1.000,
							Size = UDim2.new(0, 10, 0, 10),
							Position = UDim2.new(0, 0, 0, 0),
							Image = "rbxassetid://5100115962",
							SliceCenter = Rect.new(2, 2, 298, 298)
						})
					}),
					utility:Create("ImageButton", {
						Name = "Color",
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Position = UDim2.new(0, 0, 0, 4),
						Selectable = false,
						Size = UDim2.new(1, 0, 0, 16),
						ZIndex = 2,
						AutoButtonColor = false,
						Image = "rbxassetid://5028857472",
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(2, 2, 298, 298)
					}, {
						utility:Create("Frame", {
							Name = "Select",
							BackgroundColor3 = themes.TextColor,
							BorderSizePixel = 1,
							Position = UDim2.new(1, 0, 0, 0),
							Size = UDim2.new(0, 2, 1, 0),
							ZIndex = 2
						}),
						utility:Create("UIGradient", { -- rainbow canvas
							Color = ColorSequence.new({
								ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
								ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
								ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
								ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
								ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)),
								ColorSequenceKeypoint.new(0.82, Color3.fromRGB(255, 0, 255)),
								ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
							})
						})
					}),
					utility:Create("Frame", {
						Name = "Inputs",
						BackgroundTransparency = 1,
						Position = UDim2.new(0, 10, 0, 158),
						Size = UDim2.new(1, 0, 0, 16)
					}, {
						utility:Create("UIListLayout", {
							FillDirection = Enum.FillDirection.Horizontal,
							SortOrder = Enum.SortOrder.LayoutOrder,
							Padding = UDim.new(0, 6)
						}),
						utility:Create("ImageLabel", {
							Name = "R",
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							Size = UDim2.new(0.305, 0, 1, 0),
							ZIndex = 2,
							Image = "rbxassetid://5028857472",
							ImageColor3 = themes.DarkContrast,
							ScaleType = Enum.ScaleType.Slice,
							SliceCenter = Rect.new(2, 2, 298, 298)
						}, {
							utility:Create("TextLabel", {
								Name = "Text",
								BackgroundTransparency = 1,
								Size = UDim2.new(0.400000006, 0, 1, 0),
								ZIndex = 2,
								Font = Enum.Font.Gotham,
								Text = "R:",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							}),
							utility:Create("TextBox", {
								Name = "Textbox",
								BackgroundTransparency = 1,
								Position = UDim2.new(0.300000012, 0, 0, 0),
								Size = UDim2.new(0.600000024, 0, 1, 0),
								ZIndex = 2,
								Font = Enum.Font.Gotham,
								PlaceholderColor3 = themes.DarkContrast,
								Text = "255",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							})
						}),
						utility:Create("ImageLabel", {
							Name = "G",
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							Size = UDim2.new(0.305, 0, 1, 0),
							ZIndex = 2,
							Image = "rbxassetid://5028857472",
							ImageColor3 = themes.DarkContrast,
							ScaleType = Enum.ScaleType.Slice,
							SliceCenter = Rect.new(2, 2, 298, 298)
						}, {
							utility:Create("TextLabel", {
								Name = "Text",
								BackgroundTransparency = 1,
								ZIndex = 2,
								Size = UDim2.new(0.400000006, 0, 1, 0),
								Font = Enum.Font.Gotham,
								Text = "G:",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							}),
							utility:Create("TextBox", {
								Name = "Textbox",
								BackgroundTransparency = 1,
								Position = UDim2.new(0.300000012, 0, 0, 0),
								Size = UDim2.new(0.600000024, 0, 1, 0),
								ZIndex = 2,
								Font = Enum.Font.Gotham,
								Text = "255",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							})
						}),
						utility:Create("ImageLabel", {
							Name = "B",
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							Size = UDim2.new(0.305, 0, 1, 0),
							ZIndex = 2,
							Image = "rbxassetid://5028857472",
							ImageColor3 = themes.DarkContrast,
							ScaleType = Enum.ScaleType.Slice,
							SliceCenter = Rect.new(2, 2, 298, 298)
						}, {
							utility:Create("TextLabel", {
								Name = "Text",
								BackgroundTransparency = 1,
								Size = UDim2.new(0.400000006, 0, 1, 0),
								ZIndex = 2,
								Font = Enum.Font.Gotham,
								Text = "B:",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							}),
							utility:Create("TextBox", {
								Name = "Textbox",
								BackgroundTransparency = 1,
								Position = UDim2.new(0.300000012, 0, 0, 0),
								Size = UDim2.new(0.600000024, 0, 1, 0),
								ZIndex = 2,
								Font = Enum.Font.Gotham,
								Text = "255",
								TextColor3 = themes.TextColor,
								TextSize = 10.000
							})
						}),
					}),
					utility:Create("ImageButton", {
						Name = "Button",
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Size = UDim2.new(1, 0, 0, 20),
						ZIndex = 2,
						Image = "rbxassetid://5028857472",
						ImageColor3 = themes.DarkContrast,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(2, 2, 298, 298)
					}, {
						utility:Create("TextLabel", {
							Name = "Text",
							BackgroundTransparency = 1,
							Size = UDim2.new(1, 0, 1, 0),
							ZIndex = 3,
							Font = Enum.Font.Gotham,
							Text = "Submit",
							TextColor3 = themes.TextColor,
							TextSize = 11.000
						})
					})
				})
			})

			utility:DraggingEnabled(tab)
			table.insert(self.modules, colorpicker)
			--self:Resize()

			local allowed = {
				[""] = true
			}

			local canvas = tab.Container.Canvas
			local color = tab.Container.Color

			local canvasSize, canvasPosition = canvas.AbsoluteSize, canvas.AbsolutePosition
			local colorSize, colorPosition = color.AbsoluteSize, color.AbsolutePosition

			local draggingColor, draggingCanvas

			local color3 = default or Color3.fromRGB(255, 255, 255)
			local hue, sat, brightness = 0, 0, 1
			local rgb = {
				r = 255,
				g = 255,
				b = 255
			}

			self.colorpickers[colorpicker] = {
				tab = tab,
				callback = function(prop, value)
					rgb[prop] = value
					hue, sat, brightness = Color3.toHSV(Color3.fromRGB(rgb.r, rgb.g, rgb.b))
				end
			}

			local callback = function(value)
				if callback then
					callback(value, function(...)
						self:updateColorPicker(colorpicker, ...)
					end)
				end
			end

			utility:DraggingEnded(function()
				draggingColor, draggingCanvas = false, false
			end)

			if default then
				self:updateColorPicker(colorpicker, nil, default)

				hue, sat, brightness = Color3.toHSV(default)
				default = Color3.fromHSV(hue, sat, brightness)

				for i, prop in pairs({"r", "g", "b"}) do
					rgb[prop] = default[prop:upper()] * 255
				end
			end

			for i, container in pairs(tab.Container.Inputs:GetChildren()) do -- i know what you are about to say, so shut up
				if container:IsA("ImageLabel") then
					local textbox = container.Textbox
					local focused

					textbox.Focused:Connect(function()
						focused = true
					end)

					textbox.FocusLost:Connect(function()
						focused = false

						if not tonumber(textbox.Text) then
							textbox.Text = math.floor(rgb[container.Name:lower()])
						end
					end)

					textbox:GetPropertyChangedSignal("Text"):Connect(function()
						local text = textbox.Text

						if not allowed[text] and not tonumber(text) then
							textbox.Text = text:sub(1, #text - 1)
						elseif focused and not allowed[text] then
							rgb[container.Name:lower()] = math.clamp(tonumber(textbox.Text), 0, 255)

							local color3 = Color3.fromRGB(rgb.r, rgb.g, rgb.b)
							hue, sat, brightness = Color3.toHSV(color3)

							self:updateColorPicker(colorpicker, nil, color3)
							callback(color3)
						end
					end)
				end
			end

			canvas.MouseButton1Down:Connect(function()
				draggingCanvas = true

				while draggingCanvas do

					local x, y = mouse.X, mouse.Y

					sat = math.clamp((x - canvasPosition.X) / canvasSize.X, 0, 1)
					brightness = 1 - math.clamp((y - canvasPosition.Y) / canvasSize.Y, 0, 1)

					color3 = Color3.fromHSV(hue, sat, brightness)

					for i, prop in pairs({"r", "g", "b"}) do
						rgb[prop] = color3[prop:upper()] * 255
					end

					self:updateColorPicker(colorpicker, nil, {hue, sat, brightness}) -- roblox is literally retarded
					utility:Tween(canvas.Cursor, {Position = UDim2.new(sat, 0, 1 - brightness, 0)}, 0.1) -- overwrite

					callback(color3)
					utility:Wait()
				end
			end)

			color.MouseButton1Down:Connect(function()
				draggingColor = true

				while draggingColor do

					hue = 1 - math.clamp(1 - ((mouse.X - colorPosition.X) / colorSize.X), 0, 1)
					color3 = Color3.fromHSV(hue, sat, brightness)

					for i, prop in pairs({"r", "g", "b"}) do
						rgb[prop] = color3[prop:upper()] * 255
					end

					local x = hue -- hue is updated
					self:updateColorPicker(colorpicker, nil, {hue, sat, brightness}) -- roblox is literally retarded
					utility:Tween(tab.Container.Color.Select, {Position = UDim2.new(x, 0, 0, 0)}, 0.1) -- overwrite

					callback(color3)
					utility:Wait()
				end
			end)

			-- click events
			local button = colorpicker.Button
			local toggle, debounce, animate

			lastColor = Color3.fromHSV(hue, sat, brightness)
			animate = function(visible, overwrite)

				if overwrite then

					if not toggle then
						return
					end

					if debounce then
						while debounce do
							utility:Wait()
						end
					end
				elseif not overwrite then
					if debounce then
						return
					end

					if button.ImageTransparency == 0 then
						utility:Pop(button, 10)
					end
				end

				toggle = visible
				debounce = true

				if visible then

					if self.page.library.activePicker and self.page.library.activePicker ~= animate then
						self.page.library.activePicker(nil, true)
					end

					self.page.library.activePicker = animate
					lastColor = Color3.fromHSV(hue, sat, brightness)

					local x1, x2 = button.AbsoluteSize.X / 2, 162--tab.AbsoluteSize.X
					local px, py = button.AbsolutePosition.X, button.AbsolutePosition.Y

					tab.ClipsDescendants = true
					tab.Visible = true
					tab.Size = UDim2.new(0, 0, 0, 0)

					tab.Position = UDim2.new(0, x1 + x2 + px, 0, py)
					utility:Tween(tab, {Size = UDim2.new(0, 162, 0, 169)}, 0.2)

					-- update size and position
					wait(0.2)
					tab.ClipsDescendants = false

					canvasSize, canvasPosition = canvas.AbsoluteSize, canvas.AbsolutePosition
					colorSize, colorPosition = color.AbsoluteSize, color.AbsolutePosition
				else
					utility:Tween(tab, {Size = UDim2.new(0, 0, 0, 0)}, 0.2)
					tab.ClipsDescendants = true

					wait(0.2)
					tab.Visible = false
				end

				debounce = false
			end

			local toggleTab = function()
				animate(not toggle)
			end

			button.MouseButton1Click:Connect(toggleTab)
			colorpicker.MouseButton1Click:Connect(toggleTab)

			tab.Container.Button.MouseButton1Click:Connect(function()
				animate()
			end)

			tab.Close.MouseButton1Click:Connect(function()
				self:updateColorPicker(colorpicker, nil, lastColor)
				animate()
			end)

			return colorpicker
		end

		function section:addSlider(title, default, min, max, callback)
			local slider = utility:Create("ImageButton", {
				Name = "Slider",
				Parent = self.container,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Position = UDim2.new(0.292817682, 0, 0.299145311, 0),
				Size = UDim2.new(1, 0, 0, 50),
				ZIndex = 2,
				Image = "rbxassetid://5028857472",
				ImageColor3 = themes.DarkContrast,
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(2, 2, 298, 298)
			}, {
				utility:Create("TextLabel", {
					Name = "Title",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0, 6),
					Size = UDim2.new(0.5, 0, 0, 16),
					ZIndex = 3,
					Font = Enum.Font.Gotham,
					Text = title,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextTransparency = 0.10000000149012,
					TextXAlignment = Enum.TextXAlignment.Left
				}),
				utility:Create("TextBox", {
					Name = "TextBox",
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Position = UDim2.new(1, -30, 0, 6),
					Size = UDim2.new(0, 20, 0, 16),
					ZIndex = 3,
					Font = Enum.Font.GothamSemibold,
					Text = default or min,
					TextColor3 = themes.TextColor,
					TextSize = 12,
					TextXAlignment = Enum.TextXAlignment.Right
				}),
				utility:Create("TextLabel", {
					Name = "Slider",
					BackgroundTransparency = 1,
					Position = UDim2.new(0, 10, 0, 28),
					Size = UDim2.new(1, -20, 0, 16),
					ZIndex = 3,
					Text = "",
				}, {
					utility:Create("ImageLabel", {
						Name = "Bar",
						AnchorPoint = Vector2.new(0, 0.5),
						BackgroundTransparency = 1,
						Position = UDim2.new(0, 0, 0.5, 0),
						Size = UDim2.new(1, 0, 0, 4),
						ZIndex = 3,
						Image = "rbxassetid://5028857472",
						ImageColor3 = themes.LightContrast,
						ScaleType = Enum.ScaleType.Slice,
						SliceCenter = Rect.new(2, 2, 298, 298)
					}, {
						utility:Create("ImageLabel", {
							Name = "Fill",
							BackgroundTransparency = 1,
							Size = UDim2.new(0.8, 0, 1, 0),
							ZIndex = 3,
							Image = "rbxassetid://5028857472",
							ImageColor3 = themes.TextColor,
							ScaleType = Enum.ScaleType.Slice,
							SliceCenter = Rect.new(2, 2, 298, 298)
						}, {
							utility:Create("ImageLabel", {
								Name = "Circle",
								AnchorPoint = Vector2.new(0.5, 0.5),
								BackgroundTransparency = 1,
								ImageTransparency = 1.000,
								ImageColor3 = themes.TextColor,
								Position = UDim2.new(1, 0, 0.5, 0),
								Size = UDim2.new(0, 10, 0, 10),
								ZIndex = 3,
								Image = "rbxassetid://4608020054"
							})
						})
					})
				})
			})

			table.insert(self.modules, slider)
			--self:Resize()

			local allowed = {
				[""] = true,
				["-"] = true
			}

			local textbox = slider.TextBox
			local circle = slider.Slider.Bar.Fill.Circle

			local value = default or min
			local dragging, last

			local callback = function(value)
				if callback then
					callback(value, function(...)
						self:updateSlider(slider, ...)
					end)
				end
			end

			self:updateSlider(slider, nil, value, min, max)

			utility:DraggingEnded(function()
				dragging = false
			end)

			slider.MouseButton1Down:Connect(function(input)
				dragging = true

				while dragging do
					utility:Tween(circle, {ImageTransparency = 0}, 0.1)

					value = self:updateSlider(slider, nil, nil, min, max, value)
					callback(value)

					utility:Wait()
				end

				wait(0.5)
				utility:Tween(circle, {ImageTransparency = 1}, 0.2)
			end)

			textbox.FocusLost:Connect(function()
				if not tonumber(textbox.Text) then
					value = self:updateSlider(slider, nil, default or min, min, max)
					callback(value)
				end
			end)

			textbox:GetPropertyChangedSignal("Text"):Connect(function()
				local text = textbox.Text

				if not allowed[text] and not tonumber(text) then
					textbox.Text = text:sub(1, #text - 1)
				elseif not allowed[text] then	
					value = self:updateSlider(slider, nil, tonumber(text) or value, min, max)
					callback(value)
				end
			end)

			return slider
		end

		function section:addDropdown(title, list, callback)
			local dropdown = utility:Create("Frame", {
				Name = "Dropdown",
				Parent = self.container,
				BackgroundTransparency = 1,
				Size = UDim2.new(1, 0, 0, 30),
				ClipsDescendants = true
			}, {
				utility:Create("UIListLayout", {
					SortOrder = Enum.SortOrder.LayoutOrder,
					Padding = UDim.new(0, 4)
				}),
				utility:Create("ImageLabel", {
					Name = "Search",
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Size = UDim2.new(1, 0, 0, 30),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.DarkContrast,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("TextBox", {
						Name = "TextBox",
						AnchorPoint = Vector2.new(0, 0.5),
						BackgroundTransparency = 1,
						TextTruncate = Enum.TextTruncate.AtEnd,
						Position = UDim2.new(0, 10, 0.5, 1),
						Size = UDim2.new(1, -42, 1, 0),
						ZIndex = 3,
						Font = Enum.Font.Gotham,
						Text = title,
						TextColor3 = themes.TextColor,
						TextSize = 12,
						TextTransparency = 0.10000000149012,
						TextXAlignment = Enum.TextXAlignment.Left
					}),
					utility:Create("ImageButton", {
						Name = "Button",
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Position = UDim2.new(1, -28, 0.5, -9),
						Size = UDim2.new(0, 18, 0, 18),
						ZIndex = 3,
						Image = "rbxassetid://5012539403",
						ImageColor3 = themes.TextColor,
						SliceCenter = Rect.new(2, 2, 298, 298)
					})
				}),
				utility:Create("ImageLabel", {
					Name = "List",
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Size = UDim2.new(1, 0, 1, -34),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.Background,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("ScrollingFrame", {
						Name = "Frame",
						Active = true,
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Position = UDim2.new(0, 4, 0, 4),
						Size = UDim2.new(1, -8, 1, -8),
						CanvasPosition = Vector2.new(0, 28),
						CanvasSize = UDim2.new(0, 0, 0, 120),
						ZIndex = 2,
						ScrollBarThickness = 3,
						ScrollBarImageColor3 = themes.DarkContrast
					}, {
						utility:Create("UIListLayout", {
							SortOrder = Enum.SortOrder.LayoutOrder,
							Padding = UDim.new(0, 4)
						})
					})
				})
			})

			table.insert(self.modules, dropdown)
			--self:Resize()

			local search = dropdown.Search
			local focused

			list = list or {}

			search.Button.MouseButton1Click:Connect(function()
				if search.Button.Rotation == 0 then
					self:updateDropdown(dropdown, nil, list, callback)
				else
					self:updateDropdown(dropdown, nil, nil, callback)
				end
			end)

			search.TextBox.Focused:Connect(function()
				if search.Button.Rotation == 0 then
					self:updateDropdown(dropdown, nil, list, callback)
				end

				focused = true
			end)

			search.TextBox.FocusLost:Connect(function()
				focused = false
			end)

			search.TextBox:GetPropertyChangedSignal("Text"):Connect(function()
				if focused then
					local list = utility:Sort(search.TextBox.Text, list)
					list = #list ~= 0 and list 

					self:updateDropdown(dropdown, nil, list, callback)
				end
			end)

			dropdown:GetPropertyChangedSignal("Size"):Connect(function()
				self:Resize()
			end)

			return dropdown
		end

		-- class functions


		function library:SelectPage(page, toggle)

			if toggle and self.focusedPage == page then -- already selected
				return
			end

			local button = page.button

			if toggle then
				-- page button
				--button.Title.TextTransparency = 0

				utility:Tween(button.Title, {TextTransparency = 0}, 0.5)
				button.Title.Font = Enum.Font.FredokaOne

				if button:FindFirstChild("Icon") then
					utility:Tween(button.Icon, {ImageTransparency = 0}, 0.5)
					--button.Icon.ImageTransparency = 0
				end

				-- update selected page
				local focusedPage = self.focusedPage
				self.focusedPage = page

				if focusedPage then
					self:SelectPage(focusedPage)
				end

				-- sections
				local existingSections = focusedPage and #focusedPage.sections or 0
				local sectionsRequired = #page.sections - existingSections

				page:Resize()

				for i, section in pairs(page.sections) do
					section.container.Parent.ImageTransparency = 0
				end

				if sectionsRequired < 0 then -- "hides" some sections
					for i = existingSections, #page.sections + 1, -1 do
						local section = focusedPage.sections[i].container.Parent

						utility:Tween(section, {ImageTransparency = 1}, 0.1)
					end
				end

				wait(0.1)
				page.container.Visible = true

				if focusedPage then
					focusedPage.container.Visible = false
				end

				if sectionsRequired > 0 then -- "creates" more section
					for i = existingSections + 1, #page.sections do
						local section = page.sections[i].container.Parent

						section.ImageTransparency = 1
						utility:Tween(section, {ImageTransparency = 0}, 0.05)
					end
				end

				wait(0.05)

				for i, section in pairs(page.sections) do

					utility:Tween(section.container.Title, {TextTransparency = 0}, 0.1)
					section:Resize(true)

					wait(0.05)
				end

				wait(0.05)
				page:Resize(true)
			else
				-- page button
				button.Title.Font = Enum.Font.Gotham
				--button.Title.TextTransparency = 0.65
				utility:Tween(button.Title, {TextTransparency = 0.65}, 0.5)

				if button:FindFirstChild("Icon") then
					--button.Icon.ImageTransparency = 0.65
					utility:Tween(button.Icon, {ImageTransparency = 0.65}, 0.5)
				end

				-- sections
				for i, section in pairs(page.sections) do
					utility:Tween(section.container.Parent, {Size = UDim2.new(1, -10, 0, 28)}, 0.1)
					utility:Tween(section.container.Title, {TextTransparency = 1}, 0.1)
				end

				wait(0.1)

				page.lastPosition = page.container.CanvasPosition.Y
				page:Resize()
			end
		end

		function page:Resize(scroll)
			local padding = 10
			local size = 0

			for i, section in pairs(self.sections) do
				size = size + section.container.Parent.AbsoluteSize.Y + padding
			end

			self.container.CanvasSize = UDim2.new(0, 0, 0, size)
			self.container.ScrollBarImageTransparency = size > self.container.AbsoluteSize.Y

			if scroll then
				utility:Tween(self.container, {CanvasPosition = Vector2.new(0, self.lastPosition or 0)}, 0.2)
			end
		end

		function section:Resize(smooth)

			if self.page.library.focusedPage ~= self.page then
				return
			end

			local padding = 4
			local size = (4 * padding) + self.container.Title.AbsoluteSize.Y -- offset

			for i, module in pairs(self.modules) do
				size = size + module.AbsoluteSize.Y + padding
			end

			if smooth then
				utility:Tween(self.container.Parent, {Size = UDim2.new(1, -10, 0, size)}, 0.05)
			else
				self.container.Parent.Size = UDim2.new(1, -10, 0, size)
				self.page:Resize()
			end
		end

		function section:getModule(info)

			if table.find(self.modules, info) then
				return info
			end

			for i, module in pairs(self.modules) do
				if (module:FindFirstChild("Title") or module:FindFirstChild("TextBox", true)).Text == info then
					return module
				end
			end

			error("No module found under "..tostring(info))
		end

		-- updates

		function section:updateButton(button, title)
			button = self:getModule(button)

			button.Title.Text = title
		end

		function section:updateToggle(toggle, title, value)
			spawn(function()
				toggle = self:getModule(toggle)

				local position = {
					In = UDim2.new(0, 2, 0.5, -6),
					Out = UDim2.new(0, 20, 0.5, -6)
				}
				local color = {
					In = themes.NotToggledColor,
					Out = themes.ToggledColor
				}

				local frame = toggle.Button.Frame
				local btn = toggle.Button
				value = value and "Out" or "In"

				if title then
					toggle.Title.Text = title
				end

				utility:Tween(frame, {
					Size = UDim2.new(1, -22, 1, -9),
					Position = position[value] + UDim2.new(0, 0, 0, 2.5)
				}, 0.2)

				utility:Tween(btn, {
					ImageColor3 = color[value]
				}, 0.2)

				wait(0.1)
				utility:Tween(frame, {
					Size = UDim2.new(1, -22, 1, -4),
					Position = position[value]
				}, 0.1)
			end)
		end



		function section:updateTextbox(textbox, title, value)
			textbox = self:getModule(textbox)

			if title then
				textbox.Title.Text = title
			end

			if value then
				textbox.Button.Textbox.Text = value
			end

		end

		function section:updateKeybind(keybind, title, key)
			keybind = self:getModule(keybind)

			local text = keybind.Button.Text
			local bind = self.binds[keybind]

			if title then
				keybind.Title.Text = title
			end

			if bind.connection then
				bind.connection = bind.connection:UnBind()
			end

			if key then
				self.binds[keybind].connection = utility:BindToKey(key, bind.callback)
				text.Text = key.Name
			else
				text.Text = "None"
			end
		end

		function section:updateColorPicker(colorpicker, title, color)
			colorpicker = self:getModule(colorpicker)

			local picker = self.colorpickers[colorpicker]
			local tab = picker.tab
			local callback = picker.callback

			if title then
				colorpicker.Title.Text = title
				tab.Title.Text = title
			end

			local color3
			local hue, sat, brightness

			if type(color) == "table" then -- roblox is literally retarded x2
				hue, sat, brightness = unpack(color)
				color3 = Color3.fromHSV(hue, sat, brightness)
			else
				color3 = color
				hue, sat, brightness = Color3.toHSV(color3)
			end

			utility:Tween(colorpicker.Button, {ImageColor3 = color3}, 0.5)
			utility:Tween(tab.Container.Color.Select, {Position = UDim2.new(hue, 0, 0, 0)}, 0.1)

			utility:Tween(tab.Container.Canvas, {ImageColor3 = Color3.fromHSV(hue, 1, 1)}, 0.5)
			utility:Tween(tab.Container.Canvas.Cursor, {Position = UDim2.new(sat, 0, 1 - brightness)}, 0.5)

			for i, container in pairs(tab.Container.Inputs:GetChildren()) do
				if container:IsA("ImageLabel") then
					local value = math.clamp(color3[container.Name], 0, 1) * 255

					container.Textbox.Text = math.floor(value)
					--callback(container.Name:lower(), value)
				end
			end
		end

		function section:updateSlider(slider, title, value, min, max, lvalue)
			slider = self:getModule(slider)

			if title then
				slider.Title.Text = title
			end

			local bar = slider.Slider.Bar
			local percent = (mouse.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X

			if value then -- support negative ranges
				percent = (value - min) / (max - min)
			end

			percent = math.clamp(percent, 0, 1)
			value = value or math.floor(min + (max - min) * percent)

			slider.TextBox.Text = value
			utility:Tween(bar.Fill, {
				Size = UDim2.new(percent, 0, 1, 0),
				ImageColor3 = themes.Slider
			}, 0.1)

			if value ~= lvalue and slider.ImageTransparency == 0 then
				utility:Pop(slider, 10)
			end

			return value
		end
		function section:clearDropdown(dropdown)
			dropdown = self:getModule(dropdown)

			if title then
				dropdown.Search.TextBox.Text = title
			end


			for i, button in pairs(dropdown.List.Frame:GetChildren()) do
				if button:IsA("ImageButton") then
					button:Destroy()
				end
			end

		end 
		function section:updateDropdown(dropdown, title, list, callback)
			dropdown = self:getModule(dropdown)

			if title then
				dropdown.Search.TextBox.Text = title
			end

			local entries = 0

			utility:Pop(dropdown.Search, 10)

			for i, button in pairs(dropdown.List.Frame:GetChildren()) do
				if button:IsA("ImageButton") then
					button:Destroy()
				end
			end

			for i, value in pairs(list or {}) do
				local button = utility:Create("ImageButton", {
					Parent = dropdown.List.Frame,
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Size = UDim2.new(1, 0, 0, 30),
					ZIndex = 2,
					Image = "rbxassetid://5028857472",
					ImageColor3 = themes.DarkContrast,
					ScaleType = Enum.ScaleType.Slice,
					SliceCenter = Rect.new(2, 2, 298, 298)
				}, {
					utility:Create("TextLabel", {
						BackgroundTransparency = 1,
						Position = UDim2.new(0, 10, 0, 0),
						Size = UDim2.new(1, -10, 1, 0),
						ZIndex = 3,
						Font = Enum.Font.Gotham,
						Text = value,
						TextColor3 = themes.TextColor,
						TextSize = 12,
						TextXAlignment = "Left",
						TextTransparency = 0.10000000149012
					})
				})

				button.MouseButton1Click:Connect(function()
					if callback then
						callback(value, function(...)
							self:updateDropdown(dropdown, ...)
						end)	
					end

					self:updateDropdown(dropdown, value, nil, callback)
				end)

				entries = entries + 1
			end

			local frame = dropdown.List.Frame

			utility:Tween(dropdown, {Size = UDim2.new(1, 0, 0, (entries == 0 and 30) or math.clamp(entries, 0, 3) * 34 + 38)}, 0.3)
			utility:Tween(dropdown.Search.Button, {Rotation = list and 180 or 0}, 0.3)

			if entries > 3 then

				for i, button in pairs(dropdown.List.Frame:GetChildren()) do
					if button:IsA("ImageButton") then
						button.Size = UDim2.new(1, -6, 0, 30)
					end
				end

				frame.CanvasSize = UDim2.new(0, 0, 0, (entries * 34) - 4)
				frame.ScrollBarImageTransparency = 0
			else
				frame.CanvasSize = UDim2.new(0, 0, 0, 0)
				frame.ScrollBarImageTransparency = 1
			end
		end
	end





	-- init
	--local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/oxilegeek/gui-creator/main/gui%20creator"))()
	local venyx = library.new(name, 8988759357)

	if hided then
		game.CoreGui:FindFirstChild(name).Main.Visible = false
		venyx:toggle()
		game.CoreGui:FindFirstChild(name).Main.Visible = true
	end



	local UIS = game:GetService("UserInputService")
	local ThePlayer = game.Players.LocalPlayer
	local Teams = game:GetService("Teams")

	-- var
	local noclip = false
	local UserInputService = game:GetService("UserInputService")
	local infiniJump = false
	local runservice = game:GetService("RunService")
	local bot = false
	local bringChest = false
	local toChest = false
	local autocollect = false
	local autocollectEgg = false
	local HideReward = false
	local baseSpeed = game.StarterPlayer.CharacterWalkSpeed
	local baseJump = game.StarterPlayer.CharacterJumpPower
	local baseGravity = game.Workspace.Gravity
	local baseLevit = 2
	local killAuraTarget1 = nil
	local killAuraTarget2 = nil
	local killAuraTarget3 = nil
	local killAuraTarget4 = nil
	local spamHit1 = false
	local spamHit2 = false
	local spamHit3 = false
	local spamHit4 = false
	local KillAura = false
	local autoHit = false
	local tpPlayerFocus = nil
	local autofarm = false
	local BotFocus = nil
	local FollowBot = false
	local autoEat = false
	local cooldownEat = 0
	local CanKillGorilla = true
	local CanKillCerber = true
	local eToTeleport = false
	local oldMaxZoom = game.Players.LocalPlayer.CameraMaxZoomDistance
	local createPackName = nil
	local RoleplayName = nil
	local ShowPosition = false
	local BossKillFarm = false
	local BossKillFarmFix = false
	local testSpeedValue = 16
	local BossKillFarmFixFocus = "Trex"
	local BABAutofarmSpeed = 1
	local antiPortalAbuse = false
	local slowloop = 1
	local ZombieKillAura = false
	local ZombieAutofarm = false
	local flyKeybindToggle = true
	local doCashier = false
	local doCook = false
	local doBoxer = false
	local ffc = game.FindFirstChild
	local orderDict={["3540529228"]="Cheese",["3540530535"]="Sausage",["3540529917"]="Pepperoni",["2512571151"]="Dew",["2512441325"]="Dew"}
	local cookingDict = {Cheese=0,Sausage=0,Pepperoni=0,Dew=0}
	local cookPtick = 0
	local cookDtick = 0
	local cookWarned = false
	local boxerWarned = false
	local basicSpeed = baseSpeed
	local basicJump = baseJump
	local basicLevitation = baseLevit
	local basicGravity = baseGravity
	local autoSetSpeed = false
	local doDelivery = false
	local DefaultSky
	local DefaultSkyStat
	local alwaysDay = false
	local doSupplier = false
	local ESPToggle = false
	local currentSpeed = 0
	local shiftToSprint = false
	local sprintSpeed = 20
	local autoDeletePart = false
	local alwaysNight = false
	local timePositionValue = 0
	local showFarmOffer = false
	local PriceFrame = nil
	local ArtistToCopyName = ""
	local PaintSpeed = 0.4
	local ArtistPlotNum = 1
	local PaintID = 1
	local invisibleWallTable = {}
	local invisibleWallsShowed = false
	local keys = shared.keys or {"A", "S", "D", "F"} -- MAKE THIS YOUR ROBEATS KEYBINDS FROM LEFT TO RIGHT, OR SET IN SHARED.KEYS
	local Autoplayer = {}
	local focusTpPlayer = false
	local focusTpPlayerName
	local IsInvisible = false
	local jetpack = false
	local autocollectEggSpeed = 10
	local flingEnabled = false

	local VirtualInputManager = game:GetService("VirtualInputManager")
	local camera = workspace.CurrentCamera
	local RobeatsAutoplayToggle = false



	local function deleteGui()
		game.CoreGui:FindFirstChild(name):Destroy()
		game.CoreGui:FindFirstChild("FoxiMusic"):Destroy()
		alive = false
		for i, v in pairs(workspace:GetDescendants()) do
			if v.Name == "OxiCheatESP" or v.Name == "OxiCheatESPHealth" then
				v:Destroy()
			end
		end

		for i, v in pairs(invisibleWallTable) do
			if v then
				v.Transparency = 1
			end
		end

		invisibleWallTable = {}
	end

	-- delete old menu
	game.CoreGui.ChildAdded:Connect(function(child)
		if ( child.Name == name or child:FindFirstChild("imAFox") ) and alive == true then
			deleteGui()
		end
	end)

	--local DefaultSky = game.Lighting.Sky print("{" ..DefaultSky.MoonAngularSize ..", " ..'"' ..DefaultSky.MoonTextureId ..'"' ..", " ..'"' ..DefaultSky.SkyboxBk ..'"' ..", " ..'"' ..DefaultSky.SkyboxDn ..'"' ..", " ..'"' ..DefaultSky.SkyboxFt ..'"' ..", " ..'"' ..DefaultSky.SkyboxLf ..'"' ..", " ..'"' ..DefaultSky.SkyboxRt ..'"' ..", " ..'"' ..DefaultSky.SkyboxUp ..'"' ..", " ..DefaultSky.StarCount ..", " ..DefaultSky.SunAngularSize ..", " ..'"' ..DefaultSky.SunTextureId ..'"' .."}")

	local presetsSky = {
		["Realistic sky"] = {true, 11, "rbxasset://sky/moon.jpg", "http://www.roblox.com/asset/?id=144933338", "http://www.roblox.com/asset/?id=144931530", "http://www.roblox.com/asset/?id=144933262", "http://www.roblox.com/asset/?id=144933244", "http://www.roblox.com/asset/?id=144933299", "http://www.roblox.com/asset/?id=144931564", 1500, 5, "rbxasset://sky/sun.jpg"},
		["Cartoon sky"] = {true, 11, "rbxasset://sky/moon.jpg", "http://www.roblox.com/asset/?id=5333954202", "http://www.roblox.com/asset/?id=5333944933", "http://www.roblox.com/asset/?id=5333954202", "http://www.roblox.com/asset/?id=5333954202", "http://www.roblox.com/asset/?id=5333954202", "http://www.roblox.com/asset/?id=5333943668", 3000, 21, "rbxasset://sky/sun.jpg"},
		["Pink sky"] = {false, 11, "rbxasset://sky/moon.jpg", "http://www.roblox.com/asset/?id=271042516", "http://www.roblox.com/asset/?id=271077243", "http://www.roblox.com/asset/?id=271042556", "http://www.roblox.com/asset/?id=271042310", "http://www.roblox.com/asset/?id=271042467", "http://www.roblox.com/asset/?id=271077958", 1334, 21, "rbxasset://sky/sun.jpg"},
		["Island theme sky"] = {false, 11, "rbxasset://sky/moon.jpg", "rbxassetid://600830446", "rbxassetid://600831635", "rbxassetid://600832720", "rbxassetid://600886090", "rbxassetid://600833862", "rbxassetid://600835177", 3000, 21, "rbxasset://sky/sun.jpg"},
		["Galaxy sky"] = {false, 11, "rbxasset://sky/moon.jpg", "http://www.roblox.com/asset/?id=159454299", "http://www.roblox.com/asset/?id=159454296", "http://www.roblox.com/asset/?id=159454293", "http://www.roblox.com/asset/?id=159454286", "http://www.roblox.com/asset/?id=159454300", "http://www.roblox.com/asset/?id=159454288", 0, 21, "rbxasset://sky/sun.jpg"},
		["Night time sky"] = {false, 1.5, "rbxassetid://1075087760", "rbxassetid://2670643994", "rbxassetid://2670643365", "rbxassetid://2670643214", "rbxassetid://2670643070", "rbxassetid://2670644173", "rbxassetid://2670644331", 500, 12, "rbxassetid://1084351190"},
		["Night City sky"] = {true, 11, "rbxasset://sky/moon.jpg", "http://www.roblox.com/asset/?id=386170521", "http://www.roblox.com/asset/?id=386170789", "http://www.roblox.com/asset/?id=386170521", "http://www.roblox.com/asset/?id=386170521", "http://www.roblox.com/asset/?id=386170521", "http://www.roblox.com/asset/?ID=2013298", 3000, 21, "rbxassetid://4693618"},

	}
	local ActiveSky = "Default"

	--database var
	local basicPrint = "hi ^^"

	--build a boat
	local BABFastAutofarm = false
	local TheEnd = false
	local SlotNumber = nil


	--Database
	--local printData = game:GetService("DataStoreService"):GetDataStore("PrintData")


	-- function
	local vu = game:GetService("VirtualUser")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)

	end)


	function findNearestTorso(pos)
		local list = game.Players:GetPlayers()
		local torso = nil
		local dist = 1000
		local temp = nil
		local human = nil
		local temp2 = nil
		for x = 1, #list do
			temp2 = list[x]
			if temp2.Name == game.Players.LocalPlayer.Name then

			else
				temp = temp2.Character:findFirstChild("HumanoidRootPart")
				human = temp2.Character:findFirstChild("Humanoid")
				if (temp ~= nil) and (human ~= nil) and (human.Health > 0) then
					if (temp.Position - pos).magnitude < dist then
						torso = temp
						dist = (temp.Position - pos).magnitude
					end
				end
			end
		end
		return torso
	end


	do

		------------------------------------------------------------------------
		-- Freecam
		-- Cinematic free camera for spectating and video production.
		------------------------------------------------------------------------

		local pi    = math.pi
		local abs   = math.abs
		local clamp = math.clamp
		local exp   = math.exp
		local rad   = math.rad
		local sign  = math.sign
		local sqrt  = math.sqrt
		local tan   = math.tan

		local ContextActionService = game:GetService("ContextActionService")
		local Players = game:GetService("Players")
		local RunService = game:GetService("RunService")
		local StarterGui = game:GetService("StarterGui")
		local UserInputService = game:GetService("UserInputService")
		local Workspace = game:GetService("Workspace")
		local Settings = UserSettings()
		local GameSettings = Settings.GameSettings

		local LocalPlayer = Players.LocalPlayer
		if not LocalPlayer then
			Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
			LocalPlayer = Players.LocalPlayer
		end

		local Camera = Workspace.CurrentCamera
		Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
			local newCamera = Workspace.CurrentCamera
			if newCamera then
				Camera = newCamera
			end
		end)

		local FFlagUserExitFreecamBreaksWithShiftlock
		do
			local success, result = pcall(function()
				return UserSettings():IsUserFeatureEnabled("UserExitFreecamBreaksWithShiftlock")
			end)
			FFlagUserExitFreecamBreaksWithShiftlock = success and result
		end

		------------------------------------------------------------------------

		local TOGGLE_INPUT_PRIORITY = Enum.ContextActionPriority.Low.Value
		local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value
		local FREECAM_MACRO_KB = {Enum.KeyCode.LeftShift, Enum.KeyCode.P}

		local NAV_GAIN = Vector3.new(1, 1, 1)*64
		local PAN_GAIN = Vector2.new(0.75, 1)*8
		local FOV_GAIN = 300

		local PITCH_LIMIT = rad(90)

		local VEL_STIFFNESS = 1.5
		local PAN_STIFFNESS = 1.0
		local FOV_STIFFNESS = 4.0

		------------------------------------------------------------------------

		local Spring = {} do
			Spring.__index = Spring

			function Spring.new(freq, pos)
				local self = setmetatable({}, Spring)
				self.f = freq
				self.p = pos
				self.v = pos*0
				return self
			end

			function Spring:Update(dt, goal)
				local f = self.f*2*pi
				local p0 = self.p
				local v0 = self.v

				local offset = goal - p0
				local decay = exp(-f*dt)

				local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
				local v1 = (f*dt*(offset*f - v0) + v0)*decay

				self.p = p1
				self.v = v1

				return p1
			end

			function Spring:Reset(pos)
				self.p = pos
				self.v = pos*0
			end
		end

		------------------------------------------------------------------------

		local cameraPos = Vector3.new()
		local cameraRot = Vector2.new()
		local cameraFov = 0

		local velSpring = Spring.new(VEL_STIFFNESS, Vector3.new())
		local panSpring = Spring.new(PAN_STIFFNESS, Vector2.new())
		local fovSpring = Spring.new(FOV_STIFFNESS, 0)

		------------------------------------------------------------------------

		local Input = {} do
			local thumbstickCurve do
				local K_CURVATURE = 2.0
				local K_DEADZONE = 0.15

				local function fCurve(x)
					return (exp(K_CURVATURE*x) - 1)/(exp(K_CURVATURE) - 1)
				end

				local function fDeadzone(x)
					return fCurve((x - K_DEADZONE)/(1 - K_DEADZONE))
				end

				function thumbstickCurve(x)
					return sign(x)*clamp(fDeadzone(abs(x)), 0, 1)
				end
			end

			local gamepad = {
				ButtonX = 0,
				ButtonY = 0,
				DPadDown = 0,
				DPadUp = 0,
				ButtonL2 = 0,
				ButtonR2 = 0,
				Thumbstick1 = Vector2.new(),
				Thumbstick2 = Vector2.new(),
			}

			local keyboard = {
				W = 0,
				A = 0,
				S = 0,
				D = 0,
				E = 0,
				Q = 0,
				U = 0,
				H = 0,
				J = 0,
				K = 0,
				I = 0,
				Y = 0,
				Up = 0,
				Down = 0,
				LeftShift = 0,
				RightShift = 0,
			}

			local mouse = {
				Delta = Vector2.new(),
				MouseWheel = 0,
			}

			local NAV_GAMEPAD_SPEED  = Vector3.new(1, 1, 1)
			local NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
			local PAN_MOUSE_SPEED    = Vector2.new(1, 1)*(pi/64)
			local PAN_GAMEPAD_SPEED  = Vector2.new(1, 1)*(pi/8)
			local FOV_WHEEL_SPEED    = 1.0
			local FOV_GAMEPAD_SPEED  = 0.25
			local NAV_ADJ_SPEED      = 0.75
			local NAV_SHIFT_MUL      = 0.25

			local navSpeed = 1

			function Input.Vel(dt)
				navSpeed = clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)

				local kGamepad = Vector3.new(
					thumbstickCurve(gamepad.Thumbstick1.X),
					thumbstickCurve(gamepad.ButtonR2) - thumbstickCurve(gamepad.ButtonL2),
					thumbstickCurve(-gamepad.Thumbstick1.Y)
				)*NAV_GAMEPAD_SPEED

				local kKeyboard = Vector3.new(
					keyboard.D - keyboard.A + keyboard.K - keyboard.H,
					keyboard.E - keyboard.Q + keyboard.I - keyboard.Y,
					keyboard.S - keyboard.W + keyboard.J - keyboard.U
				)*NAV_KEYBOARD_SPEED

				local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift)

				return (kGamepad + kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
			end

			function Input.Pan(dt)
				local kGamepad = Vector2.new(
					thumbstickCurve(gamepad.Thumbstick2.Y),
					thumbstickCurve(-gamepad.Thumbstick2.X)
				)*PAN_GAMEPAD_SPEED
				local kMouse = mouse.Delta*PAN_MOUSE_SPEED
				mouse.Delta = Vector2.new()
				return kGamepad + kMouse
			end

			function Input.Fov(dt)
				local kGamepad = (gamepad.ButtonX - gamepad.ButtonY)*FOV_GAMEPAD_SPEED
				local kMouse = mouse.MouseWheel*FOV_WHEEL_SPEED
				mouse.MouseWheel = 0
				return kGamepad + kMouse
			end

			do
				local function Keypress(action, state, input)
					keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
					return Enum.ContextActionResult.Sink
				end

				local function GpButton(action, state, input)
					gamepad[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
					return Enum.ContextActionResult.Sink
				end

				local function MousePan(action, state, input)
					local delta = input.Delta
					mouse.Delta = Vector2.new(-delta.y, -delta.x)
					return Enum.ContextActionResult.Sink
				end

				local function Thumb(action, state, input)
					gamepad[input.KeyCode.Name] = input.Position
					return Enum.ContextActionResult.Sink
				end

				local function Trigger(action, state, input)
					gamepad[input.KeyCode.Name] = input.Position.z
					return Enum.ContextActionResult.Sink
				end

				local function MouseWheel(action, state, input)
					mouse[input.UserInputType.Name] = -input.Position.z
					return Enum.ContextActionResult.Sink
				end

				local function Zero(t)
					for k, v in pairs(t) do
						t[k] = v*0
					end
				end

				function Input.StartCapture()
					ContextActionService:BindActionAtPriority("FreecamKeyboard", Keypress, false, INPUT_PRIORITY,
						Enum.KeyCode.W, Enum.KeyCode.U,
						Enum.KeyCode.A, Enum.KeyCode.H,
						Enum.KeyCode.S, Enum.KeyCode.J,
						Enum.KeyCode.D, Enum.KeyCode.K,
						Enum.KeyCode.E, Enum.KeyCode.I,
						Enum.KeyCode.Q, Enum.KeyCode.Y,
						Enum.KeyCode.Up, Enum.KeyCode.Down
					)
					ContextActionService:BindActionAtPriority("FreecamMousePan",          MousePan,   false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement)
					ContextActionService:BindActionAtPriority("FreecamMouseWheel",        MouseWheel, false, INPUT_PRIORITY, Enum.UserInputType.MouseWheel)
					ContextActionService:BindActionAtPriority("FreecamGamepadButton",     GpButton,   false, INPUT_PRIORITY, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY)
					ContextActionService:BindActionAtPriority("FreecamGamepadTrigger",    Trigger,    false, INPUT_PRIORITY, Enum.KeyCode.ButtonR2, Enum.KeyCode.ButtonL2)
					ContextActionService:BindActionAtPriority("FreecamGamepadThumbstick", Thumb,      false, INPUT_PRIORITY, Enum.KeyCode.Thumbstick1, Enum.KeyCode.Thumbstick2)
				end

				function Input.StopCapture()
					navSpeed = 1
					Zero(gamepad)
					Zero(keyboard)
					Zero(mouse)
					ContextActionService:UnbindAction("FreecamKeyboard")
					ContextActionService:UnbindAction("FreecamMousePan")
					ContextActionService:UnbindAction("FreecamMouseWheel")
					ContextActionService:UnbindAction("FreecamGamepadButton")
					ContextActionService:UnbindAction("FreecamGamepadTrigger")
					ContextActionService:UnbindAction("FreecamGamepadThumbstick")
				end
			end
		end

		local function GetFocusDistance(cameraFrame)
			local znear = 0.1
			local viewport = Camera.ViewportSize
			local projy = 2*tan(cameraFov/2)
			local projx = viewport.x/viewport.y*projy
			local fx = cameraFrame.rightVector
			local fy = cameraFrame.upVector
			local fz = cameraFrame.lookVector

			local minVect = Vector3.new()
			local minDist = 512

			for x = 0, 1, 0.5 do
				for y = 0, 1, 0.5 do
					local cx = (x - 0.5)*projx
					local cy = (y - 0.5)*projy
					local offset = fx*cx - fy*cy + fz
					local origin = cameraFrame.p + offset*znear
					local _, hit = Workspace:FindPartOnRay(Ray.new(origin, offset.unit*minDist))
					local dist = (hit - origin).magnitude
					if minDist > dist then
						minDist = dist
						minVect = offset.unit
					end
				end
			end

			return fz:Dot(minVect)*minDist
		end

		------------------------------------------------------------------------

		local function StepFreecam(dt)
			local vel = velSpring:Update(dt, Input.Vel(dt))
			local pan = panSpring:Update(dt, Input.Pan(dt))
			local fov = fovSpring:Update(dt, Input.Fov(dt))

			local zoomFactor = sqrt(tan(rad(70/2))/tan(rad(cameraFov/2)))

			cameraFov = clamp(cameraFov + fov*FOV_GAIN*(dt/zoomFactor), 1, 120)
			cameraRot = cameraRot + pan*PAN_GAIN*(dt/zoomFactor)
			cameraRot = Vector2.new(clamp(cameraRot.x, -PITCH_LIMIT, PITCH_LIMIT), cameraRot.y%(2*pi))

			local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*NAV_GAIN*dt)
			cameraPos = cameraCFrame.p

			Camera.CFrame = cameraCFrame
			Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
			Camera.FieldOfView = cameraFov
		end

		local function CheckMouseLockAvailability()
			local devAllowsMouseLock = Players.LocalPlayer.DevEnableMouseLock
			local devMovementModeIsScriptable = Players.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.Scriptable
			local userHasMouseLockModeEnabled = GameSettings.ControlMode == Enum.ControlMode.MouseLockSwitch
			local userHasClickToMoveEnabled =  GameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove
			local MouseLockAvailable = devAllowsMouseLock and userHasMouseLockModeEnabled and not userHasClickToMoveEnabled and not devMovementModeIsScriptable

			return MouseLockAvailable
		end

		------------------------------------------------------------------------

		local PlayerState = {} do
			local mouseBehavior
			local mouseIconEnabled
			local cameraType
			local cameraFocus
			local cameraCFrame
			local cameraFieldOfView
			local screenGuis = {}
			local coreGuis = {
				Backpack = true,
				Chat = true,
				Health = true,
				PlayerList = true,
			}
			local setCores = {
				BadgesNotificationsActive = true,
				PointsNotificationsActive = true,
			}

			-- Save state and set up for freecam
			function PlayerState.Push()
				for name in pairs(coreGuis) do
					coreGuis[name] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[name])
					StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], false)
				end
				for name in pairs(setCores) do
					setCores[name] = StarterGui:GetCore(name)
					StarterGui:SetCore(name, false)
				end
				local playergui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
				if playergui then
					for _, gui in pairs(playergui:GetChildren()) do
						if gui:IsA("ScreenGui") and gui.Enabled then
							screenGuis[#screenGuis + 1] = gui
							gui.Enabled = false
						end
					end
				end

				cameraFieldOfView = Camera.FieldOfView
				Camera.FieldOfView = 70

				cameraType = Camera.CameraType
				Camera.CameraType = Enum.CameraType.Custom

				cameraCFrame = Camera.CFrame
				cameraFocus = Camera.Focus

				mouseIconEnabled = UserInputService.MouseIconEnabled
				UserInputService.MouseIconEnabled = false

				if FFlagUserExitFreecamBreaksWithShiftlock and CheckMouseLockAvailability() then
					mouseBehavior = Enum.MouseBehavior.Default
				else
					mouseBehavior = UserInputService.MouseBehavior
				end
				UserInputService.MouseBehavior = Enum.MouseBehavior.Default
			end

			-- Restore state
			function PlayerState.Pop()
				for name, isEnabled in pairs(coreGuis) do
					StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], isEnabled)
				end
				for name, isEnabled in pairs(setCores) do
					StarterGui:SetCore(name, isEnabled)
				end
				for _, gui in pairs(screenGuis) do
					if gui.Parent then
						gui.Enabled = true
					end
				end

				Camera.FieldOfView = cameraFieldOfView
				cameraFieldOfView = nil

				Camera.CameraType = cameraType
				cameraType = nil

				Camera.CFrame = cameraCFrame
				cameraCFrame = nil

				Camera.Focus = cameraFocus
				cameraFocus = nil

				UserInputService.MouseIconEnabled = mouseIconEnabled
				mouseIconEnabled = nil

				UserInputService.MouseBehavior = mouseBehavior
				mouseBehavior = nil
			end
		end

		local function StartFreecam()
			local cameraCFrame = Camera.CFrame
			cameraRot = Vector2.new(cameraCFrame:toEulerAnglesYXZ())
			cameraPos = cameraCFrame.p
			cameraFov = Camera.FieldOfView

			velSpring:Reset(Vector3.new())
			panSpring:Reset(Vector2.new())
			fovSpring:Reset(0)

			PlayerState.Push()
			RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
			Input.StartCapture()
		end

		local function StopFreecam()
			Input.StopCapture()
			RunService:UnbindFromRenderStep("Freecam")
			PlayerState.Pop()
		end

		------------------------------------------------------------------------

		do
			local enabled = false

			function ToggleFreecam()
				if enabled then
					StopFreecam()
				else
					StartFreecam()
				end
				enabled = not enabled
			end

			local function CheckMacro(macro)
				for i = 1, #macro - 1 do
					if not UserInputService:IsKeyDown(macro[i]) then
						return
					end
				end
				ToggleFreecam()
			end


		end
	end



	local function autoFarmBAB()
		repeat wait(0.1) until game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local stages = game.Workspace.BoatStages.NormalStages:GetChildren()
		for i = 1, #stages do
			if alive then
				if i < 11 then
					if BABFastAutofarm then
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(stages[i].DarknessPart.Position)
						wait(BABAutofarmSpeed)
					end
				else
					if i == 12 then
						break
					end
					if BABFastAutofarm then
						TheEnd = true
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.BoatStages.NormalStages.TheEnd.GoldenChest.Base.LockPosition.Position)
					end
				end
			end
		end
	end

	if game.GameId == 210851291 then
		game.Players.LocalPlayer.PlayerGui.RiverResultsGui.Frame.Changed:Connect(function()
			if BABFastAutofarm then
				autoFarmBAB()
			end
		end)
	end

	local trackEmote
	function StartEmote(id, looped)
		if trackEmote then
			trackEmote:Stop()
		end

		local animation = Instance.new("Animation")
		animation.AnimationId = "rbxassetid://" ..id
		wait(1)
		trackEmote = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(animation)
		trackEmote.Looped = looped

		trackEmote:Play()

		print("played")
	end


	function bot()
		while wait() do
			local goal = game.Players:FindFirstChild(FollowBot).Character.HumanoidRootPart

			local pathfinding = game:GetService("PathfindingService")

			local path = pathfinding:CreatePath()
			path:ComputeAsync(game.Players.LocalPlayer.Character.HumanoidRootPart.Position, goal.Position)

			local waypoints = path:GetWaypoints()


			for i, waypoint in pairs(waypoints) do

				if waypoint.Action == Enum.PathWaypointAction.Jump then

					game.Players.LocalPlayer.Character.Humanoid.Jump = true
				end

				game.Players.LocalPlayer.Character.Humanoid:MoveTo(waypoint.Position)

				game.Players.LocalPlayer.Character.Humanoid.MoveToFinished:Wait()

			end
		end
	end

	_G.FLYING = false
	local CONTROL = {F = 0, B = 0, L = 0, R = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0}
	local SPEED = 5
	local MOUSE = game.Players.LocalPlayer:GetMouse()
	local flySpeed = 50


	local function FLY()
		local BG = Instance.new('BodyGyro', game.Players.LocalPlayer.Character.HumanoidRootPart)
		local BV = Instance.new('BodyVelocity', game.Players.LocalPlayer.Character.HumanoidRootPart)
		BG.P = 9e4
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
		BV.velocity = Vector3.new(0, 0.1, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)


		spawn(function()
			repeat wait()
				game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 then
					SPEED = flySpeed
				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0) and SPEED ~= 0 then
					SPEED = 0
				end
				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 then
					BV.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and SPEED ~= 0 then
					BV.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B) * 0.2, 0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
				else
					BV.velocity = Vector3.new(0, 0.1, 0)
				end
				BG.cframe = game.Workspace.CurrentCamera.CoordinateFrame
			until not _G.FLYING or _G.FLYING and not flyKeybindToggle
			CONTROL = {F = 0, B = 0, L = 0, R = 0}
			lCONTROL = {F = 0, B = 0, L = 0, R = 0}
			SPEED = 0
			BG:destroy()
			BV:destroy()
			game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
		end)
	end

	MOUSE.KeyDown:connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 1
		elseif KEY:lower() == 's' then
			CONTROL.B = -1
		elseif KEY:lower() == 'a' then
			CONTROL.L = -1 
		elseif KEY:lower() == 'd' then 
			CONTROL.R = 1
		end
	end)

	MOUSE.KeyUp:connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		end
	end)

	function GetDefaultSky()
		local skyFounded = false
		for i, v in pairs(game.Lighting:GetChildren()) do
			if not skyFounded and v:IsA("Sky") then
				skyFounded = true
				return v
			end
		end
	end

	ALLYCOLOR = {0,255,255}  	
	ENEMYCOLOR =  {255,0,0} 	
	TRANSPARENCY = 0.5		
	HEALTHBAR_ACTIVATED = true 	





	function createFlex()


		players = game:GetService("Players")
		faces = {"Front","Back","Bottom","Left","Right","Top"}
		currentPlayer = nil 
		lplayer = players.LocalPlayer 

		players.PlayerAdded:Connect(function(p)
			currentPlayer = p
			p.CharacterAdded:Connect(function(character)
				wait(0.1)
				createESP(character)			
			end)		
		end)

		function checkPart(obj)  if (obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation")) then return true end end

		function actualESP(obj) 

			for i=0,5 do
				surface = Instance.new("SurfaceGui",obj) 
				surface.Face = Enum.NormalId[faces[i+1]]
				surface.AlwaysOnTop = true
				--surface.MaxDistance = math.huge
				surface.Enabled = ESPToggle
				surface.Name = "OxiCheatESP"

				local frame = Instance.new("Frame",surface)	
				frame.Size = UDim2.new(1,0,1,0)
				frame.BorderSizePixel = 0												
				frame.BackgroundTransparency = TRANSPARENCY
				spawn(function()
					local TempPlr = players:FindFirstChild(surface.Parent.Parent.Name) 
					while true do 
						if TempPlr.Team == players.LocalPlayer.Team then
							frame.BackgroundColor3 = Color3.new(ALLYCOLOR[1],ALLYCOLOR[2],ALLYCOLOR[3])											
						else
							frame.BackgroundColor3 = Color3.new(ENEMYCOLOR[1],ENEMYCOLOR[2],ENEMYCOLOR[3])
						end
						wait(1)
					end
				end)


				surface:GetPropertyChangedSignal("AlwaysOnTop"):connect(function()
					surface.AlwaysOnTop = true
				end)

			end
		end

		function createHealthbar(hrp) 
			board =Instance.new("BillboardGui",hrp)
			board.Name = "OxiCheatESPHealth"
			board.Size = UDim2.new(1,0,1,0)
			board.StudsOffset = Vector3.new(3,1,0)
			board.AlwaysOnTop = true
			board.Enabled = ESPToggle
			--board.MaxDistance = math.huge

			bar = Instance.new("Frame",board)
			bar.BackgroundColor3 = Color3.new(255,0,0)
			bar.BorderSizePixel = 0
			bar.Size = UDim2.new(0.2,0,4,0)
			bar.Name = "total2"

			health = Instance.new("Frame",bar)
			health.BackgroundColor3 = Color3.new(0,255,0)
			health.BorderSizePixel = 0
			health.Size = UDim2.new(1,0,hrp.Parent.Humanoid.Health/ hrp.Parent.Humanoid.MaxHealth,0)
			hrp.Parent.Humanoid.Changed:Connect(function(property) 
				if hrp:FindFirstChild("OxiCheatESPHealth") then
					hrp.OxiCheatESPHealth.total2.Frame.Size = UDim2.new(1,0, hrp.Parent.Humanoid.Health / hrp.Parent.Humanoid.MaxHealth, 0)							
				end
			end)

			board:GetPropertyChangedSignal("AlwaysOnTop"):connect(function()
				board.AlwaysOnTop = true
			end)
		end

		function createESP(c)
			if c then
				bugfix = c:WaitForChild("Head") 
				for i,v in pairs(c:GetChildren()) do
					if checkPart(v) then
						actualESP(v)
					end
				end
				if HEALTHBAR_ACTIVATED then
					createHealthbar(c:WaitForChild("HumanoidRootPart")) 
				end
			end
		end

		for i,people in pairs(players:GetChildren())do
			if people ~= players.LocalPlayer then
				currentPlayer = people
				createESP(people.Character)
				people.CharacterAdded:Connect(function(character)
					createESP(character)			
				end)
			end
		end
	end


	function closeESP()
		for i, v in pairs(workspace:GetDescendants()) do
			if v.Name == "OxiCheatESP" or v.Name == "OxiCheatESPHealth" then
				v:Destroy()
			end
		end
	end

	function openESP()
		spawn(createFlex)
	end



	do
		local PlaceId = game.PlaceId

		local Players = game:GetService("Players");
		local HttpService = game:GetService("HttpService");
		local Workspace = game:GetService("Workspace");
		local Teams = game:GetService("Teams")
		local UserInputService = game:GetService("UserInputService")
		local RunService = game:GetService("RunService");

		local CurrentCamera = Workspace.CurrentCamera
		local WorldToViewportPoint = CurrentCamera.WorldToViewportPoint
		local GetPartsObscuringTarget = CurrentCamera.GetPartsObscuringTarget

		local Inset = game:GetService("GuiService"):GetGuiInset().Y

		local FindFirstChild = game.FindFirstChild
		local FindFirstChildWhichIsA = game.FindFirstChildWhichIsA
		local IsA = game.IsA
		local Vector2new = Vector2.new
		local Vector3new = Vector3.new
		local CFramenew = CFrame.new
		local Color3new = Color3.new

		local Tfind = table.find
		local create = table.create
		local format = string.format
		local floor = math.floor
		local gsub = string.gsub
		local sub = string.sub
		local lower = string.lower
		local upper = string.upper
		local random = math.random

		local DefaultSettings = {
			Esp = {
				NamesEnabled = false,
				DisplayNamesEnabled = false,
				DistanceEnabled = false,
				HealthEnabled = false,
				TracersEnabled = false,
				BoxEsp = false,
				TeamColors = true,
				Thickness = 1.5,
				TracerThickness = 1.6,
				Transparency = .9,
				TracerTrancparency = .7,
				Size = 16,
				RenderDistance = 9e9,
				Color = Color3.fromRGB(19, 130, 226),
				OutlineColor = Color3new(),
				TracerTo = "Head",
				BlacklistedTeams = {}
			},
			Aimbot = {
				Enabled = false,
				SilentAim = false,
				Wallbang = false,
				ShowFov = false,
				Snaplines = true,
				ThirdPerson = false,
				FirstPerson = false,
				ClosestCharacter = false,
				ClosestCursor = true,
				Smoothness = 1,
				SilentAimHitChance = 100,
				FovThickness = 1,
				FovTransparency = 1,
				FovSize = 150,
				FovColor = Color3new(1, 1, 1),
				Aimlock = "Head",
				SilentAimRedirect = "Head",
				BlacklistedTeams = {}
			},
			WindowPosition = UDim2.new(0.5, -200, 0.5, -139);

			Version = 1.2
		}

		--local EncodeConfig, DecodeConfig;
		--do
		--	local deepsearchset;
		--	deepsearchset = function(tbl, ret, value)
		--		if (type(tbl) == 'table') then
		--			local new = {}
		--			for i, v in next, tbl do
		--				new[i] = v
		--				if (type(v) == 'table') then
		--					new[i] = deepsearchset(v, ret, value);
		--				end
		--				if (ret(i, v)) then
		--					new[i] = value(i, v);
		--				end
		--			end
		--			return new
		--		end
		--	end

		--	DecodeConfig = function(Config)
		--		local DecodedConfig = deepsearchset(Config, function(Index, Value)
		--			return type(Value) == "table" and (Value.HSVColor or Value.Position);
		--		end, function(Index, Value)
		--			local Color = Value.HSVColor
		--			local Position = Value.Position
		--			if (Color) then
		--				return Color3.fromHSV(Color.H, Color.S, Color.V);
		--			end
		--			if (Position and Position.Y and Position.X) then
		--				return UDim2.new(UDim.new(Position.X.Scale, Position.X.Offset), UDim.new(Position.Y.Scale, Position.Y.Offset));
		--			else
		--				return DefaultSettings.WindowPosition;
		--			end
		--		end);
		--		return DecodedConfig
		--	end

		--	EncodeConfig = function(Config)
		--		local ToHSV = Color3new().ToHSV
		--		local EncodedConfig = deepsearchset(Config, function(Index, Value)
		--			return typeof(Value) == "Color3" or typeof(Value) == "UDim2"
		--		end, function(Index, Value)
		--			local Color = typeof(Value) == "Color3"
		--			local Position = typeof(Value) == "UDim2"
		--			if (Color) then
		--				local H, S, V = ToHSV(Value);
		--				return { HSVColor = { H = H, S = S, V = V } };
		--			end
		--			if (Position) then
		--				return { Position = {
		--					X = { Scale = Value.X.Scale, Offset = Value.X.Offset };
		--					Y = { Scale = Value.Y.Scale, Offset = Value.Y.Offset }
		--				} };
		--			end
		--		end)
		--		return EncodedConfig
		--	end
		--end

		--local GetConfig = function()
		--	local read, data = pcall(readfile, "fates-esp.json");
		--	local canDecode, config = pcall(HttpService.JSONDecode, HttpService, data);
		--	if (read and canDecode) then
		--		local Decoded = DecodeConfig(config);
		--		if (Decoded.Version ~= DefaultSettings.Version) then
		--			local Encoded = HttpService:JSONEncode(EncodeConfig(DefaultSettings));
		--			writefile("fates-esp.json", Encoded);
		--			return DefaultSettings;
		--		end
		--		return Decoded;
		--	else
		--		local Encoded = HttpService:JSONEncode(EncodeConfig(DefaultSettings));
		--		writefile("fates-esp.json", Encoded);
		--		return DefaultSettings
		--	end
		--end

		local Settings = DefaultSettings;

		local LocalPlayer = Players.LocalPlayer
		local Mouse = LocalPlayer:GetMouse();
		local MouseVector = Vector2new(Mouse.X, Mouse.Y);
		local Characters = {}

		local CustomGet = {
			[0] = function()
				return {}
			end
		}

		local Get;
		if (CustomGet[PlaceId]) then
			Get = CustomGet[PlaceId]();
		end

		local GetCharacter = function(Player)
			if (Get) then
				return Get.GetCharacter(Player);
			end
			return Player.Character
		end
		local CharacterAdded = function(Player, Callback)
			if (Get) then
				return
			end
			Player.CharacterAdded:Connect(Callback);
		end
		local CharacterRemoving = function(Player, Callback)
			if (Get) then
				return
			end
			Player.CharacterRemoving:Connect(Callback);
		end

		local GetTeam = function(Player)
			if (Get) then
				return Get.GetTeam(Player);
			end
			return Player.Team
		end

		local Drawings = {}

		AimbotSettings = Settings.Aimbot
		EspSettings = Settings.Esp

		FOV = Drawing.new("Circle");
		FOV.Color = AimbotSettings.FovColor
		FOV.Thickness = AimbotSettings.FovThickness
		FOV.Transparency = AimbotSettings.FovTransparency
		FOV.Filled = false
		FOV.Radius = AimbotSettings.FovSize

		Snaplines = Drawing.new("Line");
		Snaplines.Color = AimbotSettings.FovColor
		Snaplines.Thickness = .1
		Snaplines.Transparency = 1
		Snaplines.Visible = AimbotSettings.Snaplines

		table.insert(Drawings, FOV);
		table.insert(Drawings, Snaplines);

		local HandlePlayer = function(Player)
			local Character = GetCharacter(Player);
			if (Character) then
				Characters[Player] = Character
			end
			CharacterAdded(Player, function(Char)
				Characters[Player] = Char
			end);
			CharacterRemoving(Player, function(Char)
				Characters[Player] = nil
				local PlayerDrawings = Drawings[Player]
				if (PlayerDrawings) then
					PlayerDrawings.Text.Visible = false
					PlayerDrawings.Box.Visible = false
					PlayerDrawings.Tracer.Visible = false
				end
			end);

			if (Player == LocalPlayer) then return; end

			local Text = Drawing.new("Text");
			Text.Color = EspSettings.Color
			Text.OutlineColor = EspSettings.OutlineColor
			Text.Size = EspSettings.Size
			Text.Transparency = EspSettings.Transparency
			Text.Center = true
			Text.Outline = true

			local Tracer = Drawing.new("Line");
			Tracer.Color = EspSettings.Color
			Tracer.From = Vector2new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y);
			Tracer.Thickness = EspSettings.TracerThickness
			Tracer.Transparency = EspSettings.TracerTrancparency

			local Box = Drawing.new("Quad");
			Box.Thickness = EspSettings.Thickness
			Box.Transparency = EspSettings.Transparency
			Box.Filled = false
			Box.Color = EspSettings.Color

			Drawings[Player] = { Text = Text, Tracer = Tracer, Box = Box }
		end

		for Index, Player in pairs(Players:GetPlayers()) do
			HandlePlayer(Player);
		end
		Players.PlayerAdded:Connect(function(Player)
			HandlePlayer(Player);
		end);

		Players.PlayerRemoving:Connect(function(Player)
			Characters[Player] = nil
			local PlayerDrawings = Drawings[Player]
			for Index, Drawing in pairs(PlayerDrawings or {}) do
				Drawing.Visible = false
			end
			Drawings[Player] = nil
		end);

		SetProperties = function(Properties)
			for Player, PlayerDrawings in pairs(Drawings) do
				if (type(Player) ~= "number") then
					for Property, Value in pairs(Properties.Tracer or {}) do
						PlayerDrawings.Tracer[Property] = Value
					end
					for Property, Value in pairs(Properties.Text or {}) do
						PlayerDrawings.Text[Property] = Value
					end
					for Property, Value in pairs(Properties.Box or {}) do
						PlayerDrawings.Box[Property] = Value
					end
				end
			end
		end


		GetClosestPlayerAndRender = function()
			local MousePos = UIS:GetMouseLocation()
			MouseVector = Vector2.new(Mouse.X, Mouse.Y + Inset);

			local Closest = create(4);
			local Vector2Distance = math.huge
			local Vector3DistanceOnScreen = math.huge
			local Vector3Distance = math.huge

			if (AimbotSettings.ShowFov) then
				FOV.Position = MouseVector
				FOV.Visible = true
				Snaplines.Visible = false
			else
				FOV.Visible = false
			end

			local LocalRoot = Characters[LocalPlayer] and FindFirstChild(Characters[LocalPlayer], "HumanoidRootPart");
			for Player, Character in pairs(Characters) do
				if (Player == LocalPlayer) then continue; end
				local PlayerDrawings = Drawings[Player]
				local PlayerRoot = FindFirstChild(Character, "HumanoidRootPart");
				local PlayerTeam = GetTeam(Player);
				if (PlayerRoot) then
					local Redirect = FindFirstChild(Character, AimbotSettings.Aimlock);
					if (not Redirect) then
						PlayerDrawings.Text.Visible = false
						PlayerDrawings.Box.Visible = false
						PlayerDrawings.Tracer.Visible = false
						continue;
					end
					local RedirectPos = Redirect.Position
					local Tuple, Visible = WorldToViewportPoint(CurrentCamera, RedirectPos);
					local CharacterVec2 = Vector2new(Tuple.X, Tuple.Y);
					local Vector2Magnitude = (MouseVector - CharacterVec2).Magnitude
					local Vector3Magnitude = LocalRoot and (RedirectPos - LocalRoot.Position).Magnitude or math.huge
					local InRenderDistance = Vector3Magnitude <= EspSettings.RenderDistance

					if (not Tfind(AimbotSettings.BlacklistedTeams, PlayerTeam)) then
						local InFovRadius = Vector2Magnitude <= FOV.Radius
						if (InFovRadius) then
							if (Visible and Vector2Magnitude <= Vector2Distance and AimbotSettings.ClosestCursor) then
								Vector2Distance = Vector2Magnitude
								Closest = {Character, CharacterVec2, Player, Redirect}
								if (AimbotSettings.Snaplines and AimbotSettings.ShowFov) then
									Snaplines.Visible = true
									Snaplines.From = MouseVector
									Snaplines.To = CharacterVec2
								else
									Snaplines.Visible = false
								end
							end

							if (Visible and Vector3Magnitude <= Vector3DistanceOnScreen and Settings.ClosestPlayer) then
								Vector3DistanceOnScreen = Vector3Magnitude
								Closest = {Character, CharacterVec2, Player, Redirect}
							end
						end
					end

					if (InRenderDistance and Visible and not Tfind(EspSettings.BlacklistedTeams, PlayerTeam)) then
						local CharacterHumanoid = FindFirstChildWhichIsA(Character, "Humanoid") or { Health = 0, MaxHealth = 0 };
						PlayerDrawings.Text.Text = format("%s\n%s%s",
							EspSettings.NamesEnabled and Player.Name or "",
							EspSettings.DistanceEnabled and format("[%s]",
								floor(Vector3Magnitude)
							) or "",
							EspSettings.HealthEnabled and format(" [%s/%s]",
								floor(CharacterHumanoid.Health),
								floor(CharacterHumanoid.MaxHealth)
							)  or ""
						);

						PlayerDrawings.Text.Position = Vector2new(Tuple.X, Tuple.Y - 40);

						if (EspSettings.TracersEnabled) then
							PlayerDrawings.Tracer.To = CharacterVec2
						end

						if (EspSettings.BoxEsp) then
							local Parts = {}
							for Index, Part in pairs(Character:GetChildren()) do
								if (IsA(Part, "BasePart")) then
									local ViewportPos = WorldToViewportPoint(CurrentCamera, Part.Position);
									Parts[Part] = Vector2new(ViewportPos.X, ViewportPos.Y);
								end
							end

							local Top, Bottom, Left, Right
							local Distance = math.huge
							local ClosestPart = nil
							for i2, Pos in next, Parts do
								local Mag = (Pos - Vector2new(Tuple.X, 0)).Magnitude;
								if (Mag <= Distance) then
									ClosestPart = Pos
									Distance = Mag
								end
							end
							Top = ClosestPart
							ClosestPart = nil
							Distance = math.huge
							for i2, Pos in next, Parts do
								local Mag = (Pos - Vector2new(Tuple.X, CurrentCamera.ViewportSize.Y)).Magnitude;
								if (Mag <= Distance) then
									ClosestPart = Pos
									Distance = Mag
								end
							end
							Bottom = ClosestPart
							ClosestPart = nil
							Distance = math.huge
							for i2, Pos in next, Parts do
								local Mag = (Pos - Vector2new(0, Tuple.Y)).Magnitude;
								if (Mag <= Distance) then
									ClosestPart = Pos
									Distance = Mag
								end
							end
							Left = ClosestPart
							ClosestPart = nil
							Distance = math.huge
							for i2, Pos in next, Parts do
								local Mag = (Pos - Vector2new(CurrentCamera.ViewportSize.X, Tuple.Y)).Magnitude;
								if (Mag <= Distance) then
									ClosestPart = Pos
									Distance = Mag
								end
							end
							Right = ClosestPart
							ClosestPart = nil
							Distance = math.huge

							PlayerDrawings.Box.PointA = Vector2new(Right.X, Top.Y);
							PlayerDrawings.Box.PointB = Vector2new(Left.X, Top.Y);
							PlayerDrawings.Box.PointC = Vector2new(Left.X, Bottom.Y);
							PlayerDrawings.Box.PointD = Vector2new(Right.X, Bottom.Y);
						end

						if (EspSettings.TeamColors) then
							local TeamColor;
							if (PlayerTeam) then
								local BrickTeamColor = PlayerTeam.TeamColor
								TeamColor = BrickTeamColor.Color
							else
								TeamColor = Color3new(0.639216, 0.635294, 0.647059);
							end
							PlayerDrawings.Text.Color = TeamColor
							PlayerDrawings.Box.Color = TeamColor
							PlayerDrawings.Tracer.Color = TeamColor
						end

						PlayerDrawings.Text.Visible = true
						PlayerDrawings.Box.Visible = EspSettings.BoxEsp
						PlayerDrawings.Tracer.Visible = EspSettings.TracersEnabled
					else
						PlayerDrawings.Text.Visible = false
						PlayerDrawings.Box.Visible = false
						PlayerDrawings.Tracer.Visible = false
					end
				else
					PlayerDrawings.Text.Visible = false
					PlayerDrawings.Box.Visible = false
					PlayerDrawings.Tracer.Visible = false
				end
			end

			return unpack(Closest);
		end

		local Locked, SwitchedCamera = false, false
		UserInputService.InputBegan:Connect(function(Inp)
			if (AimbotSettings.Enabled and Inp.UserInputType == Enum.UserInputType.MouseButton2) then
				Locked = true
				if (AimbotSettings.FirstPerson and LocalPlayer.CameraMode ~= Enum.CameraMode.LockFirstPerson) then
					LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
					SwitchedCamera = true
				end
			end
		end);
		UserInputService.InputEnded:Connect(function(Inp)
			if (AimbotSettings.Enabled and Inp.UserInputType == Enum.UserInputType.MouseButton2) then
				Locked = false
				if (SwitchedCamera) then
					LocalPlayer.CameraMode = Enum.CameraMode.Classic
				end
			end
		end);

		local ClosestCharacter, Vector, Player, Aimlock;
		RunService.RenderStepped:Connect(function()

			if (Locked and AimbotSettings.Enabled) then
				ClosestCharacter, Vector, Player, Aimlock = GetClosestPlayerAndRender();
				if ClosestCharacter then
					if (AimbotSettings.FirstPerson) then
						if (syn) then
							CurrentCamera.CoordinateFrame = CFramenew(CurrentCamera.CoordinateFrame.p, Aimlock.Position);
						else
							mousemoverel((Vector.X - MouseVector.X) / AimbotSettings.Smoothness, (Vector.Y - MouseVector.Y) / AimbotSettings.Smoothness);
						end
					elseif (AimbotSettings.ThirdPerson) then
						mousemoveabs(Vector.X, Vector.Y);
					end
				end
			end
		end);

		local Hooks = {
			HookedFunctions = {},
			OldMetaMethods = {},
			MetaMethodHooks = {},
			HookedSignals = {}
		}

		local OtherDeprecated = {
			children = "GetChildren"
		}

		local RealMethods = {}
		local FakeMethods = {}

		local HookedFunctions = Hooks.HookedFunctions
		local MetaMethodHooks = Hooks.MetaMethodHooks
		local OldMetaMethods = Hooks.OldMetaMethods

		local randomised = random(1, 10);
		local randomisedVector = Vector3new(random(1, 10), random(1, 10), random(1, 10));
		Mouse.Move:Connect(function()
			randomised = random(1, 10);
			randomisedVector = Vector3new(random(1, 10), random(1, 10), random(1, 10));
		end);

		local x = setmetatable({}, {
			__index = function(...)
				print("index", ...);
			end,
			__add = function(...)
				print("add", ...);
			end,
			__sub = function(...)
				print("sub", ...);
			end,
			__mul = function(...)
				print("mul", ...);
			end
		});

		MetaMethodHooks.Index = function(...)
			local __Index = OldMetaMethods.__index

			if (Player and Aimlock and ... == Mouse and not checkcaller()) then
				local CallingScript = getfenv(2).script;
				if (CallingScript.Name == "CallingScript") then
					return __Index(...);
				end

				local _Mouse, Index = ...
				if (type(Index) == 'string') then
					Index = gsub(sub(Index, 0, 100), "%z.*", "");
				end
				local PassedChance = random(1, 100) < AimbotSettings.SilentAimHitChance
				if (PassedChance and AimbotSettings.SilentAim) then
					local Parts = GetPartsObscuringTarget(CurrentCamera, {CurrentCamera.CFrame.Position, Aimlock.Position}, {LocalPlayer.Character, ClosestCharacter});

					Index = string.gsub(Index, "^%l", upper);
					local Hit = #Parts == 0 or AimbotSettings.Wallbang
					if (not Hit) then
						return __Index(...);
					end
					if (Index == "Target") then
						return Aimlock
					end
					if (Index == "Hit") then
						local hit = __Index(...);
						local pos = Aimlock.Position + randomisedVector / 10
						return CFramenew(pos.X, pos.Y, pos.Z, unpack({hit:components()}, 4));
					end
					if (Index == "X") then
						return Vector.X + randomised / 10
					end
					if (Index == "Y") then
						return Vector.Y + randomised / 10
					end
				end
			end

			return __Index(...);
		end

		MetaMethodHooks.Namecall = function(...)
			local __Namecall = OldMetaMethods.__namecall
			local self = ...
			local Method = gsub(getnamecallmethod() or "", "^%l", upper);
			local Hooked = HookedFunctions[Method]
			if (Hooked and self == Hooked[1]) then
				return Hooked[3](...);
			end

			return __Namecall(...);
		end

		for MMName, MMFunc in pairs(MetaMethodHooks) do
			local MetaMethod = string.format("__%s", string.lower(MMName));
			Hooks.OldMetaMethods[MetaMethod] = hookmetamethod(game, MetaMethod, MMFunc);
		end

		HookedFunctions.FindPartOnRay = {Workspace, Workspace.FindPartOnRay, function(...)
			local OldFindPartOnRay = HookedFunctions.FindPartOnRay[4]
			if (AimbotSettings.SilentAim and Player and Aimlock and not checkcaller()) then
				local PassedChance = random(1, 100) < AimbotSettings.SilentAimHitChance
				if (ClosestCharacter and PassedChance) then
					local Parts = GetPartsObscuringTarget(CurrentCamera, {CurrentCamera.CFrame.Position, Aimlock.Position}, {LocalPlayer.Character, ClosestCharacter});
					if (#Parts == 0 or AimbotSettings.Wallbang) then
						return Aimlock, Aimlock.Position + (Vector3new(random(1, 10), random(1, 10), random(1, 10)) / 10), Vector3new(0, 1, 0), Aimlock.Material
					end
				end
			end
			return OldFindPartOnRay(...);
		end};

		HookedFunctions.FindPartOnRayWithIgnoreList = {Workspace, Workspace.FindPartOnRayWithIgnoreList, function(...)
			local OldFindPartOnRayWithIgnoreList = HookedFunctions.FindPartOnRayWithIgnoreList[4]
			if (Player and Aimlock and not checkcaller()) then
				local CallingScript = getcallingscript();
				local PassedChance = random(1, 100) < AimbotSettings.SilentAimHitChance
				if (CallingScript.Name ~= "ControlModule" and ClosestCharacter and PassedChance) then
					local Parts = GetPartsObscuringTarget(CurrentCamera, {CurrentCamera.CFrame.Position, Aimlock.Position}, {LocalPlayer.Character, ClosestCharacter});
					if (#Parts == 0 or AimbotSettings.Wallbang) then
						return Aimlock, Aimlock.Position + (Vector3new(random(1, 10), random(1, 10), random(1, 10)) / 10), Vector3new(0, 1, 0), Aimlock.Material
					end
				end
			end
			return OldFindPartOnRayWithIgnoreList(...);
		end};

		for Index, Function in pairs(HookedFunctions) do
			Function[4] = hookfunction(Function[2], Function[3]);
		end

	end



	--Animal function
	if game.GameId == 2023680558 then
		function findNearestZombieTorso(pos)
			local list = game:GetService("Workspace").NPC:GetChildren()
			local torso = nil
			local dist = 1000
			local temp = nil
			local human = nil
			local temp2 = nil
			for x = 1, #list do
				temp2 = list[x]
				if temp2.Name == "Zombie" or temp2.Name == "BigSpider" then
					temp = temp2:findFirstChild("HumanoidRootPart")
					human = temp2:findFirstChild("Humanoid")
					if (temp ~= nil) and (human ~= nil) and (human.Health > 0) then
						if (temp.Position - pos).magnitude < dist then
							torso = temp
							dist = (temp.Position - pos).magnitude
						end
					end
				end
			end
			return torso
		end
	end



	local supplyCounts = {TomatoSauce=99,Cheese=99,Sausage=99,Pepperoni=99,Dough=99,Box=99,Dew=99}
	local player = game:GetService("Players").LocalPlayer
	local ffc = game.FindFirstChild
	local RNG = Random.new()
	local network
	local character,root
	local boxPtick=0
	local boxDtick=0
	local delTool
	local delTouched=false
	local bcolorToSupply = {["Dark orange"]="Sausage",["Bright blue"]="Pepperoni",["Bright yellow"]="Cheese",["Bright red"]="TomatoSauce",["Dark green"]="Dew",["Brick yellow"]="Dough",["Light stone grey"]="Box",["Really black"]="Dew"}
	local supplyButtons = {}

	--Work at a pizza place func
	if game.GameId == 47545 then

		for _,button in ipairs(workspace.SupplyButtons:GetChildren()) do
			supplyButtons[bcolorToSupply[button.Unpressed.BrickColor.Name]] = button.Unpressed
		end

		do
			local reg = (getreg or debug.getregistry)()
			for i=1,#reg do
				local f = reg[i]
				if type(f)=="function" and tostring(getfenv(f).script)=="Paycheck" then
					for k,v in next,getupvalues(f) do
						if tostring(v) == "CashOut" then
							setupvalue(f,k,{MouseButton1Click={wait=function()end,Wait=function()end}})
							break
						end
					end
				elseif type(f)=="table" and rawget(f,"FireServer") and rawget(f,"BindEvents") then
					network = f
				end
			end
			local mt=getrawmetatable(game)
			if setreadonly then
				setreadonly(mt,false)
			elseif make_writeable then
				make_writeable(mt)
			end
			local old__newindex=mt.__newindex
			if newcclosure then
				mt.__newindex=newcclosure(function(t,k,v)
					if t~=workspace.CurrentCamera or tostring(getfenv(2).script)~="LocalMain" then
						return old__newindex(t,k,v)
					end
				end)
			else
				mt.__newindex=function(t,k,v)
					if t~=workspace.CurrentCamera or tostring(getfenv(2).script)~="LocalMain" then
						return old__newindex(t,k,v)
					end
				end
			end
			workspace.Main.RealignCamera.RealignCamera:Destroy()
			Instance.new("BindableEvent",workspace.Main.RealignCamera).Name="RealignCamera"
		end
		assert(network,"failed to find network")

		function onCharacterAdded(char)
			if not char then return end
			character=char
			root = character:WaitForChild("HumanoidRootPart")
			character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
				if delTool then
					character.Humanoid.WalkSpeed=16
				end
			end)
		end
		onCharacterAdded(player.Character or player.CharacterAdded:Wait())
		player.CharacterAdded:Connect(onCharacterAdded)


		for name in pairs(supplyCounts) do
			local lbl = workspace.SupplyCounters[name=="Dew" and "CounterMountainDew" or "Counter"..name].a.SG.Counter
			supplyCounts[name]=tonumber(lbl.Text)
			lbl.Changed:Connect(function()
				supplyCounts[name]=tonumber(lbl.Text)
			end)
		end

		function FindFirstCustomer()
			local children = workspace.Customers:GetChildren()
			for i=1,#children do
				local c = children[i]
				if ffc(c,"Head") and ffc(c,"Humanoid") and c.Head.CFrame.Z<102 and ffc(c.Head,"Dialog") and ffc(c.Head.Dialog,"Correct") and ((c.Humanoid.SeatPart and c.Humanoid.SeatPart.Anchored) or (c.Humanoid.SeatPart==nil and (c.Head.Velocity.Z^2)^.5<.0001)) then
					return c

				end
			end
		end



		function getOrders()
			local orders={}
			local tempCookingDict = {}
			for i,v in pairs(cookingDict) do tempCookingDict[i]=v end
			local children = workspace.Orders:GetChildren()
			for i=1,#children do
				local o = orderDict[children[i].SG.ImageLabel.Image:match("%d+$")]
				if o then
					if tempCookingDict[o]>0 then
						--ignores oven pizzas, so new orders are priority
						tempCookingDict[o]=tempCookingDict[o]-1
					elseif (o=="Dew" and #workspace.AllMountainDew:GetChildren()>0) or (supplyCounts[o]>0 and supplyCounts.TomatoSauce>0 and supplyCounts.Cheese>0) then
						--need supplies
						orders[#orders+1]=o
					end
				end
			end
			return orders
		end

		function FindFirstDew()
			local children = workspace.AllMountainDew:GetChildren()
			for i=1,#children do
				if not children[i].Anchored then
					return children[i]
				end
			end
		end

		function FindDoughAndWithout(str)
			local goodraw,p,raw,trash
			local children = workspace.AllDough:GetChildren()
			for i = #children, 2, -1 do --shuffle
				local j = RNG:NextInteger(1, i)
				children[j], children[i] = children[i], children[j]
			end
			for i=1,#children do
				local d = children[i]
				if d.Anchored==false and #d:GetChildren()>9 then
					if d.IsBurned.Value or d.HasBugs.Value or d.Cold.Value or (d.BrickColor.Name=="Bright orange" and ffc(d,"XBillboard")) then
						if trash==nil and d.Position.Y > 0 then
							trash=d
						end
					elseif p==nil and d.BrickColor.Name=="Bright orange" then
						p=d
					elseif goodraw==nil and d.Position.X<55 and d.BrickColor.Name=="Brick yellow" and ((str and not ffc(d.SG.Frame,str)) or (str==nil and ffc(d.SG.Frame,"Sausage")==nil and ffc(d.SG.Frame,"Pepperoni")==nil)) then
						--prefers flat
						if d.Mesh.Scale.Y<1.1 then
							goodraw=d
						else
							raw=d
						end
					end
					if goodraw and p and trash then
						return goodraw,p,trash
					end
				end
			end
			return goodraw or raw,p,trash
		end

		function getOvenNear(pos)
			local children = workspace.Ovens:GetChildren()
			for i=1,#children do
				if (children[i].Bottom.Position-pos).magnitude < 1.5 then
					return children[i]
				end
			end
		end
		function getDoughNear(pos)
			local children = workspace.AllDough:GetChildren()
			for i=1,#children do
				if (children[i].Position-pos).magnitude < 1.5 then
					return children[i]
				end
			end
		end
		function isFullyOpen(oven)
			return oven.IsOpen.Value==true and (oven.Door.Meter.RotVelocity.Z^2)^.5<.0001
		end

		function FindBoxes()
			local c,o,f
			local children = workspace.AllBox:GetChildren()
			for i=1,#children do
				local b = children[i]
				if ffc(b,"HasPizzaInside") or ffc(b,"Pizza") then
					if c==nil and b.Name=="BoxClosed" and b.Anchored==false and not b.HasPizzaInside.Value then
						c=b
					elseif o==nil and b.Name=="BoxOpen" and b.Anchored==false and not b.Pizza.Value then
						o=b
					elseif f==nil and (b.Name=="BoxOpen" and b.Pizza.Value) or (b.Name=="BoxClosed" and b.HasPizzaInside.Value) then
						f=b
					end
					if c and o and f then
						return c,o,f
					end
				end
			end
			return c,o,f
		end

		function FindBoxingFoods()
			local p,d
			local children = workspace.BoxingRoom:GetChildren()
			for i=1,#children do
				local f = children[i]
				if not f.Anchored then
					if p==nil and f.Name=="Pizza" then
						p=f
					elseif d==nil and f.Name=="Dew" then
						d=f
					end
					if p and d then
						return p,d
					end
				end
			end
			return p,d
		end


		function FindFirstDeliveryTool()
			local t
			local children = workspace:GetChildren()
			for i=1,#children do
				local v = children[i]
				if v.ClassName=="Tool" and v.Name:match("^%u%d$") and ffc(v,"House") and ffc(v,"Handle") and ffc(v,"Order") and v.Order.Value:match("%a") then
					if ffc(v.Handle,"X10") then
						return v
					end
					t = v
				end
			end
			return t
		end
		function getHousePart(address)
			local houses = workspace.Houses:GetChildren()
			for i=1,#houses do
				local h = houses[i]
				if ffc(h,"Address") and h.Address.Value==address and ffc(h,"CurrentUpgrade") and h.CurrentUpgrade.Value and ffc(h.CurrentUpgrade.Value,"GivePizza") then
					return h.CurrentUpgrade.Value.GivePizza
				end
			end
		end
		local delTouched=false
		function forgetDeliveryTool()
			if delTool then
				if delTool.Parent==player.Backpack then
					delTool.Parent = character
				end
				if delTool.Parent==character then
					wait(0.1)
					delTool.Parent = workspace
					wait(0.1)
				end
			end
			delTool=nil
			delTouched=false
			if ffc(character,"RightHand") and ffc(character.RightHand,"RightGrip") then
				character.RightHand.RightGrip:Destroy()
			end
		end

		function simTouch(part)
			local oldcc = part.CanCollide
			local oldcf = part.CFrame
			part.CanCollide = false
			root.CFrame = part.CFrame
			delay(0.01,function()
				part.CFrame = oldcf
				part.CanCollide = oldcc
			end)
		end
	end


	local function toggleInvisibleWall()
		if not invisibleWallsShowed then
			invisibleWallsShowed = true

			for i, v in pairs(workspace:GetDescendants()) do
				if v:IsA("Part") or v:IsA("MeshPart") or v:IsA("WedgePart") or v:IsA("UnionOperator") then
					if v.Transparency == 1 then
						table.insert(invisibleWallTable, 1, v)
						v.BrickColor = BrickColor.new("Yellow flip/flop")
						v.Transparency = 0.5
					end
				end
			end

		else
			invisibleWallsShowed = false
			for i, v in pairs(invisibleWallTable) do
				if v then
					v.Transparency = 1
				end
			end

			invisibleWallTable = {}
		end
	end

	--Infinite yield


	function respawn(plr)
		--if invisRunning then TurnVisible() end
		local char = plr.Character
		if char:FindFirstChildOfClass("Humanoid") then char:FindFirstChildOfClass("Humanoid"):ChangeState(15) end
		char:ClearAllChildren()
		local newChar = Instance.new("Model")
		newChar.Parent = workspace
		plr.Character = newChar
		wait()
		plr.Character = char
		newChar:Destroy()
	end

	local refreshCmd = false
	function refresh(plr)
		refreshCmd = true
		local Human = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid", true)
		local pos = Human and Human.RootPart and Human.RootPart.CFrame
		local pos1 = workspace.CurrentCamera.CFrame
		respawn(plr)
		task.spawn(function()
			plr.CharacterAdded:Wait():WaitForChild("Humanoid").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
			refreshCmd = false
		end)
	end

	function getRoot(char)
		local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
		return rootPart
	end

	function tools(plr)
		if plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
			return true
		end
	end

	function attach(speaker,target)
		if tools(speaker) then
			local char = speaker.Character
			local tchar = target
			local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
			local hrp = getRoot(speaker.Character)
			local hrp2 = getRoot(target)
			hum.Name = "1"
			local newHum = hum:Clone()
			newHum.Parent = char
			newHum.Name = "Humanoid"
			wait()
			hum:Destroy()
			workspace.CurrentCamera.CameraSubject = char
			newHum.DisplayDistanceType = "None"
			local tool = speaker:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool") or speaker.Character:FindFirstChildOfClass("Tool")
			tool.Parent = char
			hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
			local n = 0
			repeat
				wait(.1)
				n = n + 1
				hrp.CFrame = hrp2.CFrame
			until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
		else
			venyx.notify("Error", 'Tool Required','You need to have an item in your inventory to use this command')
		end
	end

	function bring(speaker,target,fast)
		if tools(speaker) then
			if target ~= nil then
				local NormPos = getRoot(speaker.Character).CFrame
				if not fast then
					refresh(speaker)
					wait()
					repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
					wait(0.3)
				end
				local hrp = getRoot(speaker.Character)
				attach(speaker,target)
				repeat
					wait()
					hrp.CFrame = NormPos
				until not getRoot(target) or not getRoot(speaker.Character)
				wait(game.Players.RespawnTime)
				speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
			end
		else
			venyx.notify("Error", 'Tool Required','You need to have an item in your inventory to use this command')
		end
	end

	function kill(speaker,target,fast)
		if tools(speaker) then
			if target ~= nil then
				local NormPos = getRoot(speaker.Character).CFrame
				if not fast then
					refresh(speaker)
					wait()
					repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
					wait(0.3)
				end
				local hrp = getRoot(speaker.Character)
				attach(speaker,target)
				repeat
					wait()
					hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)
				until not getRoot(target.Character) or not getRoot(speaker.Character)
				wait(1)
				speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
			end
		else
			notify('Tool Required','You need to have an item in your inventory to use this command')
		end
	end

	spawn(function()
		while wait() do
			if FollowBot then
				local plrtrack = game.Players:FindFirstChild(tpPlayerFocus)
				if plrtrack and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
					local path = game:GetService("PathfindingService"):ComputeRawPathAsync(game.Players.LocalPlayer.Character.HumanoidRootPart.Position,plrtrack.Character.HumanoidRootPart.Position,512)
					if path.Status == Enum.PathStatus.Success then
						local points = path:GetPointCoordinates()
						if #points < 3 then
							game.Players.LocalPlayer.Character.Humanoid:MoveTo(plrtrack.Character.HumanoidRootPart.Position)
						else
							game.Players.LocalPlayer.Character.Humanoid:MoveTo(points[3])
						end
					else
						game.Players.LocalPlayer.Character.Humanoid:MoveTo(plrtrack.Character.HumanoidRootPart.Position)
					end
				end
			end

			if not alive then
				break
			end
		end
	end)


	--DefaultSet
	DefaultSky = GetDefaultSky()
	if DefaultSky then
		DefaultSkyStat = {DefaultSky.CelestialBodiesShown, DefaultSky.MoonAngularSize, DefaultSky.MoonTextureId, DefaultSky.SkyboxBk, DefaultSky.SkyboxDn, DefaultSky.SkyboxFt, DefaultSky.SkyboxLf, DefaultSky.SkyboxRt, DefaultSky.SkyboxUp, DefaultSky.StarCount, DefaultSky.SunAngularSize, DefaultSky.SunTextureId}

	end

	local MusicIdToPlay = Instance.new("Sound", game.CoreGui)
	MusicIdToPlay.Name = "FoxiMusic"
	MusicIdToPlay.Looped = true




	local ScreenGui = game.CoreGui:FindFirstChild(name)




	-- Visual
	local page = venyx:addPage("Visual", 8988759357)
	local CameraPage = page:addSection("Camera")
	local LightingPage = page:addSection("Lighting")
	local GuiPage = page:addSection("Gui")


	CameraPage:addToggle("Camera noclip", nil, function(value)
		if value then
			game.Players.LocalPlayer.DevCameraOcclusionMode = 1
		else
			game.Players.LocalPlayer.DevCameraOcclusionMode = 0
		end
	end)

	CameraPage:addToggle("Unlock Camera max zoom distance", nil, function(value)
		if value then
			game.Players.LocalPlayer.CameraMaxZoomDistance = 100000
		else
			game.Players.LocalPlayer.CameraMaxZoomDistance = oldMaxZoom
		end
	end)



	CameraPage:addSlider("FOV", 70, 0, 120, function(value)
		game.Workspace.Camera.FieldOfView = value
	end)

	CameraPage:addButton("Reset fov", function()
		game.Workspace.Camera.FieldOfView = 70
	end)

	CameraPage:addToggle("Freeze cam", nil, function(value)
		if value then
			game.Workspace.Camera.CameraType = "Scriptable"
		else
			game.Workspace.Camera.CameraType = "Custom"
		end
	end)


	CameraPage:addKeybind("Freecam", nil, function()
		ToggleFreecam()
	end)



	LightingPage:addSlider("Brightness", 2, 0, 120, function(value)
		game.Lighting.Brightness = value
	end)

	LightingPage:addToggle("HideGlobalShadows", nil, function(value)
		game.Lighting.GlobalShadows = not value
	end)

	local objInstance = {}
	local Texture = {}
	local textureMoving = false
	CameraPage:addToggle("Remove texture (Freeze warning)", nil, function(value)
		if textureMoving == false then
			textureMoving = true
			if value then
				local num = 0
				for i, v in pairs(workspace:GetDescendants()) do

					if v:IsA("Part") or v:IsA("WedgePart") or v:IsA("MeshPart") then
						table.insert(objInstance, 1, v)
						table.insert(Texture, 1, v.Material)
						v.Material = Enum.Material.SmoothPlastic
						num += 1
					end

					if v:IsA("Texture") then
						table.insert(objInstance, 1, v)
						table.insert(Texture, 1, v.Texture)
						v.Texture = ""
						num += 1
					end

					if num >= 500 then
						num = 0
						game:GetService("RunService").RenderStepped:Wait()
					end
				end
			else
				local num = 0
				for i, v in pairs(objInstance) do
					if v then
						if v:IsA("Part") or v:IsA("WedgePart") or v:IsA("MeshPart") then
							v.Material = Texture[i]
							num += 1
						end

						if v:IsA("Texture") then
							v.Texture = Texture[i]
							num += 1
						end

						if num >= 500 then
							num = 0
							game:GetService("RunService").RenderStepped:Wait()
						end
					end
				end
			end
			textureMoving = false
			CameraPage:updateToggle("Remove texture (Freeze warning)", nil, value)
		end
	end)

	CameraPage:addToggle("Show invisible walls", nil, function(value)
		toggleInvisibleWall()
	end)

	local HidedMenuToggle = {}
	GuiPage:addToggle("HideMenu", nil, function(value)
		if value then
			for i, v in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
				if v:IsA("ScreenGui") then
					table.insert(HidedMenuToggle, v)
					v.Enabled = false
				end
			end
		else
			for i, v in pairs(HidedMenuToggle) do
				if v then
					v.Enabled = true
				end
			end
			HidedMenuToggle = {}
		end
	end)


	game:GetService("RunService").RenderStepped:Wait()






	-- BasicTp
	local page = venyx:addPage("Custom tp", 8988776454)
	local locationcreator = page:addSection("create a location")

	locationcreator:addTextbox("CustomTp", "location name", function(value, focusLost)
		if focusLost then
			customTpName = value
		end
	end)

	locationcreator:addButton("Create location", function()
		if customTpName ~= nil then
			if game.CoreGui:FindFirstChild(name).Main:FindFirstChild("Custom tp"):FindFirstChild(customTpName) then
				venyx:Notify("Error", "Incorect name")
			else
				local pageName = customTpName
				local tppage = page:addSection(customTpName)
				local buttonPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
				tppage:addButton("Tp boutton", function()
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(buttonPosition)
				end)

				tppage:addKeybind("TP keybind : ", nil, function()
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(buttonPosition)
				end)

				tppage:addButton("Delete location", function()
					utility:Tween(ScreenGui.Main["Custom tp"][pageName], {Size = UDim2.new(ScreenGui.Main["Custom tp"][pageName].Size.X, 0, 0)}, 0.5)
					wait(.5)
					table.remove(page.sections, table.find(page.sections, tppage))
					ScreenGui.Main["Custom tp"][pageName]:Destroy()
				end)

				venyx:SelectPage(venyx.pages[1], true)
				venyx:SelectPage(venyx.pages[3], true)
			end
		else
			venyx:Notify("Error", "Incorect name")
		end
	end)

	game:GetService("RunService").RenderStepped:Wait()




	-- Emotes
	local page = venyx:addPage("Emotes", 10615199280)
	local bruhSection = page:addSection("Sorry i dont have the time for this")


	--bruhSection:addText("   Sorry i dont have the time for this")
	bruhSection:addButton("Check this script (click)", function()
		loadstring(game:HttpGet("https://gitlab.com/Tsuniox/lua-stuff/-/raw/master/R15GUI.lua"))()
	end)

	--local StopEmoteSection = page:addSection("Stop emote")
	----local R6Section = page:addSection("R6 Emotes list")
	--local R15Section = page:addSection("R15 Emotes list")
	--local CustomEmoteSection = page:addSection("Custom emote")

	--StopEmoteSection:addButton("Remove emote", function()
	--	trackEmote:Stop()
	--end)

	--R15Section:addButton("Applaud", function()
	--	StartEmote(5915779043, true)
	--end)

	--R15Section:addButton("Sidekicks - George Ezra", function()
	--	StartEmote(10370922566, true)
	--end)

	--R15Section:addButton("Applaud", function()
	--	StartEmote(5915779043, true)
	--end)

	--R15Section:addButton("Happy", function()
	--	StartEmote(4849499887, true)
	--end)

	--R15Section:addText(" More comming soon")

	--local CustomEmoteID
	--CustomEmoteSection:addTextbox("Music id", "Put id here", function(value, focusLost)
	--	if focusLost then
	--		CustomEmoteID = value
	--	end
	--end)

	--R15Section:addButton("Start emote", function()
	--	StartEmote(CustomEmoteID, true)
	--end)



	game:GetService("RunService").RenderStepped:Wait()





	-- ESP / Aimbot
	local page = venyx:addPage("ESP / Aimbot", 10630306183)
	local ESPSection = page:addSection("ESP")
	local TracerSettingsSection = page:addSection("Tracer Settings")
	local SilentAimSection = page:addSection("Silent Aim")
	local AimbotSection = page:addSection("Aimbot")

	ESPSection:addToggle("Show Names", EspSettings.NamesEnabled, function(Callback)
		EspSettings.NamesEnabled = Callback
	end)

	ESPSection:addToggle("Show Health", EspSettings.HealthEnabled, function(Callback)
		EspSettings.HealthEnabled = Callback
	end)

	ESPSection:addToggle("Show Distance", EspSettings.DistanceEnabled, function(Callback)
		EspSettings.DistanceEnabled = Callback
	end)

	ESPSection:addToggle("Box Esp", EspSettings.BoxEsp, function(Callback)
		EspSettings.BoxEsp = Callback
		SetProperties({ Box = { Visible = Callback } });
	end)

	ESPSection:addSlider("Render Distance", math.clamp(EspSettings.RenderDistance, 0, 50000), 0, 50000, function(Callback)
		EspSettings.RenderDistance = Callback
	end)

	ESPSection:addSlider("Esp Size", EspSettings.Size, 0, 30, function(Callback)
		EspSettings.Size = Callback
		SetProperties({ Text = { Size = Callback } });
	end)

	ESPSection:addColorPicker("Esp Color", EspSettings.Color, function(Callback)
		EspSettings.TeamColors = false
		EspSettings.Color = Callback
		SetProperties({ Box = { Color = Callback }, Text = { Color = Callback }, Tracer = { Color = Callback } });
	end)

	ESPSection:addToggle("Team Colors", EspSettings.TeamColors, function(Callback)
		EspSettings.TeamColors = Callback
		if (not Callback) then
			SetProperties({ Tracer = { Color = EspSettings.Color }; Box = { Color = EspSettings.Color }; Text = { Color = EspSettings.Color }  })
		end
	end)

	ESPSection:addDropdown("Teams", {"Allies", "Enemies", "All"}, function(Callback)
		table.clear(EspSettings.BlacklistedTeams);
		if (Callback == "Enemies") then
			table.insert(EspSettings.BlacklistedTeams, Teams.Team);
		end
		if (Callback == "Allies") then
			local AllTeams = Teams:GetTeams();
			table.remove(AllTeams, table.find(AllTeams, ThePlayer.Team));
			EspSettings.BlacklistedTeams = AllTeams
		end
	end)

	ESPSection:addToggle("old ESP", nil, function(value)
		ESPToggle = value
		if value then
			openESP()
		else
			closeESP()
		end
	end)

	ESPSection:addKeybind("old ESP keybind : ", nil, function()
		ESPSection:updateToggle("ESP", "ESP", not ESPToggle)
		ESPToggle = not ESPToggle
		if ESPToggle then
			openESP()
		else
			closeESP()
		end
	end)


	TracerSettingsSection:addToggle("Enable Tracers", EspSettings.TracersEnabled, function(Callback)
		EspSettings.TracersEnabled = Callback
		SetProperties({ Tracer = { Visible = Callback } });
	end)

	--TracerSettingsSection:addDropdown("To", {"Head", "Torso"}, function(Callback)
	--	AimbotSettings.Aimlock = Callback == "Torso" and "HumanoidRootPart" or Callback
	--end)

	--TracerSettingsSection:addDropdown("From", {"Top", "Bottom", "Left", "Right"}, function(Callback)
	--	local ViewportSize = workspace.CurrentCamera.ViewportSize
	--	local From = Callback == "Top" and Vector2.new(ViewportSize.X / 2, ViewportSize.Y - ViewportSize.Y) or Callback == "Bottom" and Vector2.new(ViewportSize.X / 2, ViewportSize.Y) or Callback == "Left" and Vector2.new(ViewportSize.X - ViewportSize.X, ViewportSize.Y / 2) or Callback == "Right" and Vector2.new(ViewportSize.X, ViewportSize.Y / 2);
	--	EspSettings.TracerFrom = From
	--	SetProperties({ Tracer = { From = From } });
	--end)

	TracerSettingsSection:addSlider("Tracer Transparency", EspSettings.TracerTrancparency * 10, 0, 10, function(Callback)
		EspSettings.TracerTrancparency = Callback / 10
		SetProperties({ Tracer = { Transparency = Callback / 10 } });
	end)

	TracerSettingsSection:addSlider("Tracer Thickness", EspSettings.TracerThickness * 10, 0, 20, function(Callback)
		EspSettings.TracerThickness = Callback / 10
		SetProperties({ Tracer = { Thickness = Callback / 10 } });
	end)





	SilentAimSection:addToggle("Silent Aim", AimbotSettings.SilentAim, function(Callback)
		AimbotSettings.SilentAim = Callback
	end)

	SilentAimSection:addToggle("Wall shoot", AimbotSettings.Wallbang, function(Callback)
		AimbotSettings.Wallbang = Callback
	end)

	SilentAimSection:addDropdown("Aim", {"Head", "Torso"}, function(Callback)
		AimbotSettings.SilentAimRedirect = Callback
	end)

	--SilentAimSection:addSlider("Hit Chance", AimbotSettings.SilentAimHitChance, 0, 100, function(Callback)
	--	AimbotSettings.SilentAimHitChance = Callback
	--end)

	SilentAimSection:addDropdown("Aim Type", {"Closest Cursor", "Closest Player"}, function(Callback)
		if (Callback == "Closest Cursor") then
			AimbotSettings.ClosestCharacter = false
			AimbotSettings.ClosestCursor = true
		else
			AimbotSettings.ClosestCharacter = true
			AimbotSettings.ClosestCursor = false
		end
	end)

	SilentAimSection:addToggle("Show Fov", AimbotSettings.ShowFov, function(Callback)
		AimbotSettings.ShowFov = Callback
		FOV.Visible = Callback
	end)

	SilentAimSection:addColorPicker("Fov Color", AimbotSettings.FovColor, function(Callback)
		AimbotSettings.FovColor = Callback
		FOV.Color = Callback
		Snaplines.Color = Callback
	end)

	SilentAimSection:addSlider("Fov Size", AimbotSettings.FovSize / 10, 7, 50, function(Callback)
		AimbotSettings.FovSize = Callback * 10
		FOV.Radius = Callback * 10
	end)

	SilentAimSection:addToggle("Enable Snaplines", AimbotSettings.Snaplines, function(Callback)
		AimbotSettings.Snaplines = Callback
	end)






	AimbotSection:addToggle("Aimbot (M2)", AimbotSettings.Enabled, function(Callback)
		AimbotSettings.Enabled = Callback
		if (not AimbotSettings.FirstPerson and not AimbotSettings.ThirdPerson) then
			AimbotSettings.FirstPerson = true
		end
	end)

	AimbotSection:addSlider("Aimbot Smoothness", AimbotSettings.Smoothness, 1, 10, function(Callback)
		AimbotSettings.Smoothness = Callback
	end)

	local sortTeams = function(Callback)
		table.clear(AimbotSettings.BlacklistedTeams);
		if (Callback == "Enemies") then
			table.insert(AimbotSettings.BlacklistedTeams, ThePlayer.Team);
		end
		if (Callback == "Allies") then
			local AllTeams = Teams:GetTeams();
			table.remove(AllTeams, table.find(AllTeams, ThePlayer.Team));
			AimbotSettings.BlacklistedTeams = AllTeams
		end
	end

	AimbotSection:addDropdown("Team Target", {"Allies", "Enemies", "All"}, sortTeams)
	sortTeams("Enemies")

	AimbotSection:addDropdown("Aimlock Type", {"Third Person", "First Person"}, function(callback)
		if (callback == "Third Person") then
			AimbotSettings.ThirdPerson = true
			AimbotSettings.FirstPerson = false
		else
			AimbotSettings.ThirdPerson = false
			AimbotSettings.FirstPerson = true
		end
	end)





	game:GetService("RunService").RenderStepped:Wait()






	--Custom Map
	local page = venyx:addPage("Custom world", 8988796619)
	local SkyPage = page:addSection("Sky")
	local TimePage = page:addSection("Time")
	local MusicPage = page:addSection("Local music")

	SkyPage:addButton("Default game sky", function()
		if DefaultSky then
			DefaultSky.CelestialBodiesShown = DefaultSkyStat[1]
			DefaultSky.MoonAngularSize = DefaultSkyStat[2]
			DefaultSky.MoonTextureId = DefaultSkyStat[3]
			DefaultSky.SkyboxBk = DefaultSkyStat[4]
			DefaultSky.SkyboxDn = DefaultSkyStat[5]
			DefaultSky.SkyboxFt = DefaultSkyStat[6]
			DefaultSky.SkyboxLf = DefaultSkyStat[7]
			DefaultSky.SkyboxRt = DefaultSkyStat[8]
			DefaultSky.SkyboxUp = DefaultSkyStat[9]
			DefaultSky.StarCount = DefaultSkyStat[10]
			DefaultSky.SunAngularSize = DefaultSkyStat[11]
			DefaultSky.SunTextureId = DefaultSkyStat[12]
		end
	end)

	SkyPage:addButton("Realistic sky", function()
		local ThePresetSky = presetsSky["Realistic sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Cartoon sky", function()
		local ThePresetSky = presetsSky["Cartoon sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Pink sky", function()
		local ThePresetSky = presetsSky["Pink sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Island theme sky", function()
		local ThePresetSky = presetsSky["Island theme sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Galaxy sky", function()
		local ThePresetSky = presetsSky["Galaxy sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Night time sky", function()
		local ThePresetSky = presetsSky["Night time sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)

	SkyPage:addButton("Night City sky", function()
		local ThePresetSky = presetsSky["Night City sky"]

		DefaultSky.CelestialBodiesShown = ThePresetSky[1]
		DefaultSky.MoonAngularSize = ThePresetSky[2]
		DefaultSky.MoonTextureId = ThePresetSky[3]
		DefaultSky.SkyboxBk = ThePresetSky[4]
		DefaultSky.SkyboxDn = ThePresetSky[5]
		DefaultSky.SkyboxFt = ThePresetSky[6]
		DefaultSky.SkyboxLf = ThePresetSky[7]
		DefaultSky.SkyboxRt = ThePresetSky[8]
		DefaultSky.SkyboxUp = ThePresetSky[9]
		DefaultSky.StarCount = ThePresetSky[10]
		DefaultSky.SunAngularSize = ThePresetSky[11]
		DefaultSky.SunTextureId = ThePresetSky[12]
	end)



	TimePage:addToggle("Always day", nil, function(value)
		alwaysDay = value
	end)

	TimePage:addToggle("Always night", nil, function(value)
		alwaysNight = value
	end)

	MusicPage:addTextbox("Music id", "Put id here", function(value, focusLost)
		if focusLost then
			pcall(function() MusicIdToPlay.SoundId = "rbxassetid://" ..value MusicIdToPlay:Stop() end) 

			local times = 0
			repeat
				wait(0.3)
				times += 1
			until MusicIdToPlay.IsLoaded or times == 3

			if not MusicIdToPlay.IsLoaded then
				venyx:Notify("Error", "Music not found")
			end
		end
	end)

	MusicPage:addButton("Play music", function()
		MusicIdToPlay:Play()
		MusicIdToPlay:Resume()
		MusicPage:updateToggle("Pause music", "Pause music", false)
		MusicPage:updateSlider("Time", nil, math.floor(MusicIdToPlay.TimePosition), 0, math.floor(MusicIdToPlay.TimeLength), 0)
	end)

	MusicPage:addButton("Stop music", function()
		MusicIdToPlay:Stop()
		MusicIdToPlay:Pause()
	end)

	MusicPage:addToggle("Pause music", nil, function(value)
		if value then
			MusicIdToPlay:Pause()
		else
			MusicIdToPlay:Resume()
		end
	end)

	MusicPage:addSlider("Volume", 15, 0, 90, function(value)
		MusicIdToPlay.Volume = value / 30
	end)


	MusicPage:addSlider("Music speed (20 = normal)", 20, 0, 60, function(value)
		MusicIdToPlay.PlaybackSpeed = value / 20
	end)

	MusicPage:addSlider("Time", 0, 0, 100, function(value)
		--if math.floor(value * math.floor(MusicIdToPlay.TimeLength) / 100 ) + 1  ~= math.floor(MusicIdToPlay.TimePosition) and math.floor(value * math.floor(MusicIdToPlay.TimeLength) / 100 ) + 2  ~= math.floor(MusicIdToPlay.TimePosition) then

		--	print("timePositionValue : " ..timePositionValue)
		--	print("value : " .. math.floor(value * math.floor(MusicIdToPlay.TimeLength) / 100 ) + 1)
		--	print("MusicIdToPlay : " ..math.floor(MusicIdToPlay.TimePosition))
		--	MusicIdToPlay.TimePosition = math.floor(value * math.floor(MusicIdToPlay.TimeLength) / 100 ) + 1

		--end
		timePositionValue = value


	end)

	local function countSecond()
		while wait(0.1) do
			if MusicIdToPlay.Playing and MusicIdToPlay.TimeLength > 0 and math.floor(MusicIdToPlay.TimePosition) ~= timePositionValue then
				MusicPage:updateSlider("Time", nil, math.floor(MusicIdToPlay.TimePosition), 0, math.floor(MusicIdToPlay.TimeLength), 0)
			end
		end
	end

	spawn(countSecond)



	game:GetService("RunService").RenderStepped:Wait()




	----------------------------------------------------------------------------------------------------------------------------
	----------------------------------------------ISLAND------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------------------

	if game.GameId == 1659645941 then
		--Func
		local function getItem(itemName)
			if itemName then
				local item
				if game.Players.LocalPlayer.Backpack:FindFirstChild(itemName) then
					item = game.Players.LocalPlayer.Backpack:FindFirstChild(itemName) 
				else
					item = game.Players.LocalPlayer.Character:FindFirstChildOfClass(itemName)
				end

				return item
			end
		end


		--Vars
		local debugMode = false
		local CropList = {"wheat", "tomato", "carrot", "berryBush"}
		local OreList = {"rockIron", "rockCoal", "rockStone", "rockDiorite", "rockCopper", "rockGranite", "rockAndesite", "rockGold", "marinePlant1", "marinePlant2", "marinePlant3", "marinePlant4", "marinePlant5", "marinePlant6", "rockSandstone", "rockPrismarine", "rockSlate", "bamboo", "acorn", "horseradish", "tomato", "flowerCrocus", "flowerDaffodil", "rockElectrite", "rockMarble", "mushroomRed", "rockBasalt", "rockSandstoneRed", "rockDiamond"}
		local SickleList = {"sickleIron"}




		local page = venyx:addPage("Farm", 10771926797)


		local OrePage = page:addSection("Ore")

		local OreKillAura
		OrePage:addToggle("Ore killaura", nil, function(value)
			OreKillAura = value

			while OreKillAura do
				wait()
				local success = pcall(function()
					local Ore = OreList

					local part
					local block
					local maxDistance = 30
					for i, v in pairs(workspace.WildernessBlocks:GetChildren()) do
						if (v:FindFirstChild("Targettable") or v:FindFirstChild("Health")) and table.find(Ore, v.Name) then
							if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
								part = v
								block = part:FindFirstChildOfClass("MeshPart")
								maxDistance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
							end
						end
					end


					for i, v in pairs(workspace.Islands:GetChildren()) do
						for i, v in pairs(v.Blocks:GetChildren()) do
							if v:FindFirstChild("Targettable") and table.find(Ore, v.Name) then
								if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
									part = v
									block = part:FindFirstChildOfClass("MeshPart")
									maxDistance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
								end
							end
						end
					end

					if not part then game.foijehjgqhigeshgjhe:Destroy() end

					if debugMode and part then
						part.Transparency = 0
						spawn(function()
							wait(1)
							part.Transparency = 1
						end)

					end

					local args = {
						[1] = {
							["player_tracking_category"] = "join_from_web",
							["part"] = block,
							["block"] = part,
							["norm"] = part.Position + Vector3.new(math.random(-1000000, 1000000) / 1000000, math.random(-1000000, 1000000) / 1000000, math.random(-1000000, 1000000) / 1000000),
							["pos"] = Vector3.new(-0.0819238245487213, 0.0216049909591675, -0.06912681460380554)
						}
					}

					game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_BLOCK_HIT_REQUEST:InvokeServer(unpack(args))
				end)

				if not success then
					wait(0.5)
				end
			end
		end)



		local TreePage = page:addSection("Tree")
		local TreeKillAura
		TreePage:addToggle("Tree killaura", nil, function(value)
			TreeKillAura = value

			while TreeKillAura do
				wait()
				local success = pcall(function()

					local part
					local block

					for i, v in pairs(workspace.Islands:GetChildren()) do
						for i, v in pairs(v.Blocks:GetChildren()) do
							if v:FindFirstChild("Targettable") and v:FindFirstChild("trunk") then
								if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < 40 then
									part = v
									block = part:FindFirstChildOfClass("MeshPart")
								end
							end
						end
					end



					if not part then game.foijehjgqhigeshgjhe:Destroy() end

					if debugMode and part then
						part.Transparency = 0
						spawn(function()
							wait(1)
							part.Transparency = 1
						end)

					end

					local args = {
						[1] = {
							["player_tracking_category"] = "join_from_web",
							["part"] = block,
							["block"] = part,
							["norm"] = part.Position + Vector3.new(math.random(-1000000, 1000000) / 1000000, math.random(-1000000, 1000000) / 1000000, math.random(-1000000, 1000000) / 1000000),
							["pos"] = Vector3.new(-0.0819238245487213, 0.0216049909591675, -0.06912681460380554)
						}
					}

					game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_BLOCK_HIT_REQUEST:InvokeServer(unpack(args))
				end)

				if not success then
					wait(0.5)
				end
			end
		end)




		local CropPage = page:addSection("Crop")

		local SeedType = nil
		CropPage:addDropdown("Seed type", CropList, function(value)
			SeedType = value
		end)

		local AutoPlant
		CropPage:addToggle("AutoPlant seed", nil, function(value)

			AutoPlant = value
		end)


		local ignored = {}
		spawn(function()
			while true do
				wait()
				if AutoPlant then
					spawn(function()
						local part
						local maxDistance = 10

						for i, v in pairs(workspace.Islands:GetChildren()) do
							for i, v in pairs(v.Blocks:GetChildren()) do
								if v.Name == "soil" then
									if not table.find(ignored, v.Position) and (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
										maxDistance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
										part = v
									end
								end
							end
						end

						if not part then return end

						table.insert(ignored, part.Position)

						-- Script generated by SimpleSpy - credits to exx#9394

						local args = {
							[1] = {
								["upperBlock"] = false,
								["cframe"] = CFrame.new(part.Position + Vector3.new(0, 3, 0)),
								["player_tracking_category"] = "join_from_web",
								["blockType"] = SeedType
							}
						}

						game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_BLOCK_PLACE_REQUEST:InvokeServer(unpack(args))

						wait(30)
						if part then
							table.remove(ignored, table.find(ignored, part.Position))
						end
					end)
				end
			end
		end)




		local CollectCropPage = page:addSection("Collect Crop")

		local CropType = nil
		local SickleType = "sickleIron"
		CollectCropPage:addDropdown("Crop type", CropList, function(value)
			CropType = value
		end)

		CollectCropPage:addDropdown("sickleIron", SickleList, function(value)
			SickleType = value
		end)



		CollectCropPage:addButton("Autocollect crop (1 time)", function()



			local CropTable = {}
			local maxDistance = 30

			for i, v in pairs(workspace.Islands:GetChildren()) do
				for i, v in pairs(v.Blocks:GetChildren()) do
					if v.Name == CropType and v:FindFirstChildOfClass("MeshPart")--[[.Harvestable.Value]] then
						--if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
						table.insert(CropTable, v)
						--end
					end
				end
			end

			local args = {
				[1] = SickleType,
				[2] = CropTable
			}

			game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.SwingSickle:InvokeServer(unpack(args))
		end)



		local AutocollectCrop
		CollectCropPage:addToggle("Autocollect crop", nil, function(value)

			AutocollectCrop = value

			while true do

				if AutocollectCrop then
					spawn(function()
						local CropTable = {}
						local maxDistance = 30

						for i, v in pairs(workspace.Islands:GetChildren()) do
							for i, v in pairs(v.Blocks:GetChildren()) do
								if v.Name == CropType and v:FindFirstChildOfClass("MeshPart")--[[.Harvestable.Value]] then
									--if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
									table.insert(CropTable, v)
									--end
								end
							end
						end

						local args = {
							[1] = SickleType,
							[2] = CropTable
						}

						local test = game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.SwingSickle:InvokeServer(unpack(args))
						print(test)
					end)
				end
				wait(5)
			end
		end)




		local page = venyx:addPage("Machine", 10772145727)
		local AutofillPage = page:addSection("Autofill")

		local KillAura
		AutofillPage:addToggle("Autofill steel mill", nil, function(value)
			KillAura = value

			while KillAura do
				wait(0.5)
				spawn(function()
					-- Script generated by SimpleSpy - credits to exx#9394
					local item
					local itemToPut
					local maxDistance = 25
					local items = {"steelMill"}
					for i, v in pairs(workspace.Islands:GetChildren()) do
						for i, v in pairs(v.Blocks:GetChildren()) do
							if table.find(items, v.Name) then
								if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
									local TempItemToPut

									if not v.Working.Value then
										TempItemToPut = "iron"
									end
									if #v.WorkerFuel:GetChildren() < 3 then
										print(#v.WorkerFuel:GetChildren())
										TempItemToPut = "coal"
									end
									if TempItemToPut then
										item = v
										itemToPut = TempItemToPut
										maxDistance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
									end
								end
							end
						end
					end

					if not item then return end

					if debugMode and item then
						item.Transparency = 0
						spawn(function()
							wait(1)
							item.Transparency = 1
						end)
						print(itemToPut)
					end

					local args = {
						[1] = {
							["amount"] = 1,
							["block"] = item,
							["player_tracking_category"] = "join_from_web",
							["toolName"] = itemToPut
						}
					}

					game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_BLOCK_WORKER_DEPOSIT_TOOL_REQUEST:InvokeServer(unpack(args))
				end)
			end
		end)



		local AutoSmellPage = page:addSection("Auto Smelting")
		local Autosmell
		local AutosmellItem
		AutoSmellPage:addDropdown("Item", {"ironOre", "goldOre"}, function(value)
			AutosmellItem = value
		end)

		AutoSmellPage:addToggle("Autosmell", nil, function(value)
			Autosmell = value

			while Autosmell do
				wait()

				local success = pcall(function()
					local item
					local itemToPut
					local maxDistance = 25
					local items = {"smallFurnace"}
					local collect = false
					for i, v in pairs(workspace.Islands:GetChildren()) do
						for i, v in pairs(v.Blocks:GetChildren()) do
							if table.find(items, v.Name) then
								if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude < maxDistance then
									local tempItemToPut 
									local tempCollect = false



									if not v.WorkerFuel:FindFirstChild("coal") or (v.WorkerFuel:FindFirstChild("coal") and v.WorkerFuel.coal.Amount.Value < v.WorkerMaxFuel.Value) then

										--print(v.WorkerFuel:FindFirstChildOfClass("Tool").Amount.Value)
										tempItemToPut = "coal"
									end
									if not v.WorkerContents:FindFirstChild(AutosmellItem) or (v.WorkerContents:FindFirstChild(AutosmellItem) and v.WorkerContents[AutosmellItem].Amount.Value < v.WorkerMaxContents.Value) then
										tempItemToPut = AutosmellItem
									end
									if v.WorkerOutputContents:FindFirstChildOfClass("Tool") then
										tempCollect = true
									end

									local Tool = getItem(tempItemToPut)
									if (tempItemToPut and Tool and Tool.Amount.Value > 0) or tempCollect ~= false then
										itemToPut = tempItemToPut
										collect = tempCollect
										item = v
										maxDistance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude

									end		
								end
							end
						end
					end

					if debugMode and item then
						item.Transparency = 0
						spawn(function()
							wait(1)
							item.Transparency = 1
						end)

					end


					if not collect then
						if itemToPut then
							local Tool = getItem(itemToPut)

							if item then
								local args = {
									[1] = {
										["amount"] = Tool.Amount.Value,
										["block"] = item,
										["player_tracking_category"] = "join_from_web",
										["toolName"] = itemToPut
									}
								}

								game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_BLOCK_WORKER_DEPOSIT_TOOL_REQUEST:InvokeServer(unpack(args))
							end	
						else
							game.zkqjigfjzqifj:Destroy()
						end
					else


						local args = {
							[1] = {
								["tool"] = item.WorkerOutputContents:FindFirstChildOfClass("Tool"),
								["player_tracking_category"] = "join_from_web"
							}
						}

						game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.CLIENT_TOOL_PICKUP_REQUEST:InvokeServer(unpack(args))

					end	
				end)




				if not success then
					wait(0.5)
					print("test")
				end
			end
		end)

	end
